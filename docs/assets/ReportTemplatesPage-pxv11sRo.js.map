{"version":3,"file":"ReportTemplatesPage-pxv11sRo.js","sources":["../../src/pages/ReportTemplatesPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Chip,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Fab,\n  Tooltip,\n  Paper,\n} from \"@mui/material\";\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  DragIndicator as DragIcon,\n  Visibility as PreviewIcon,\n  FileCopy as CopyIcon,\n} from \"@mui/icons-material\";\nimport ExportButton from \"../components/ExportButton\";\n\ninterface ReportTemplate {\n  id: number;\n  name: string;\n  description?: string;\n  type: string;\n  is_default: boolean;\n  is_active: boolean;\n  usage_count: number;\n  created_at: string;\n}\n\ninterface ReportBlock {\n  id: number;\n  block_type: string;\n  title?: string;\n  position_order: number;\n  width_percentage: number;\n}\n\ninterface BlockType {\n  type: string;\n  name: string;\n  description: string;\n  icon: string;\n}\n\nconst ReportTemplatesPage: React.FC = () => {\n  const [templates, setTemplates] = useState<ReportTemplate[]>([]);\n  const [blockTypes, setBlockTypes] = useState<BlockType[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate | null>(null);\n  const [templateBlocks, setTemplateBlocks] = useState<ReportBlock[]>([]);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Form states\n  const [templateName, setTemplateName] = useState(\"\");\n  const [templateDescription, setTemplateDescription] = useState(\"\");\n  const [templateType, setTemplateType] = useState(\"financial\");\n\n  useEffect(() => {\n    fetchTemplates();\n    fetchBlockTypes();\n  }, []);\n\n  const fetchTemplates = async () => {\n    // TODO: Replace with actual API call\n    const mockTemplates: ReportTemplate[] = [\n      {\n        id: 1,\n        name: \"Relatório Financeiro Básico\",\n        description: \"Template padrão para relatórios financeiros\",\n        type: \"financial\",\n        is_default: true,\n        is_active: true,\n        usage_count: 15,\n        created_at: \"2024-01-01T00:00:00Z\",\n      },\n      {\n        id: 2,\n        name: \"Análise de Despesas Detalhada\",\n        description: \"Template customizado para análise detalhada de despesas\",\n        type: \"financial\",\n        is_default: false,\n        is_active: true,\n        usage_count: 8,\n        created_at: \"2024-01-05T10:30:00Z\",\n      },\n    ];\n    setTemplates(mockTemplates);\n  };\n\n  const fetchBlockTypes = async () => {\n    // TODO: Replace with actual API call\n    const mockBlockTypes: BlockType[] = [\n      {\n        type: \"header\",\n        name: \"Cabeçalho\",\n        description: \"Cabeçalho do relatório com logo e informações básicas\",\n        icon: \"header\",\n      },\n      {\n        type: \"expense_analysis\",\n        name: \"Análise de Despesas\",\n        description: \"Gráficos e tabelas de análise de despesas\",\n        icon: \"chart-bar\",\n      },\n      {\n        type: \"balance_sheet\",\n        name: \"Balanço Patrimonial Simplificado\",\n        description: \"Resumo do balanço patrimonial\",\n        icon: \"balance-scale\",\n      },\n      {\n        type: \"monthly_revenue_chart\",\n        name: \"Gráfico de Faturamento Mensal\",\n        description: \"Gráfico de evolução do faturamento\",\n        icon: \"chart-line\",\n      },\n    ];\n    setBlockTypes(mockBlockTypes);\n  };\n\n  const handleCreateTemplate = async () => {\n    setLoading(true);\n    // TODO: Implement actual API call\n    setTimeout(() => {\n      const newTemplate: ReportTemplate = {\n        id: Date.now(),\n        name: templateName,\n        description: templateDescription,\n        type: templateType,\n        is_default: false,\n        is_active: true,\n        usage_count: 0,\n        created_at: new Date().toISOString(),\n      };\n      setTemplates([...templates, newTemplate]);\n      setCreateDialogOpen(false);\n      setTemplateName(\"\");\n      setTemplateDescription(\"\");\n      setTemplateType(\"financial\");\n      setLoading(false);\n    }, 1000);\n  };\n\n  const handleEditTemplate = (template: ReportTemplate) => {\n    setSelectedTemplate(template);\n    setTemplateName(template.name);\n    setTemplateDescription(template.description || \"\");\n    setTemplateType(template.type);\n    setEditDialogOpen(true);\n  };\n\n  const handlePreviewTemplate = async (template: ReportTemplate) => {\n    setSelectedTemplate(template);\n    // TODO: Fetch template blocks\n    const mockBlocks: ReportBlock[] = [\n      {\n        id: 1,\n        block_type: \"header\",\n        title: \"Cabeçalho do Relatório\",\n        position_order: 1,\n        width_percentage: 100,\n      },\n      {\n        id: 2,\n        block_type: \"expense_analysis\",\n        title: \"Análise de Despesas\",\n        position_order: 2,\n        width_percentage: 100,\n      },\n    ];\n    setTemplateBlocks(mockBlocks);\n    setPreviewDialogOpen(true);\n  };\n\n  const handleDeleteTemplate = async (templateId: number) => {\n    if (window.confirm(\"Tem certeza que deseja excluir este template?\")) {\n      // TODO: Implement actual API call\n      setTemplates(templates.filter(t => t.id !== templateId));\n    }\n  };\n\n  const handleGenerateReport = async (template: ReportTemplate) => {\n    // TODO: Implement report generation\n    console.log(\"Generating report with template:\", template.name);\n  };\n\n  const handleExportTemplatesPdf = async () => {\n    // TODO: Implement PDF export of templates list\n    console.log(\"Exporting templates to PDF\");\n  };\n\n  const handleExportTemplatesCsv = async () => {\n    // TODO: Implement CSV export of templates list\n    console.log(\"Exporting templates to CSV\");\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"financial\":\n        return \"Financeiro\";\n      case \"payroll\":\n        return \"Folha\";\n      case \"compliance\":\n        return \"Compliance\";\n      case \"audit\":\n        return \"Auditoria\";\n      default:\n        return \"Personalizado\";\n    }\n  };\n\n  const getBlockTypeLabel = (type: string) => {\n    const blockType = blockTypes.find(bt => bt.type === type);\n    return blockType ? blockType.name : type;\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", mb: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Modelos de Relatório\n        </Typography>\n        <Box sx={{ display: \"flex\", gap: 2 }}>\n          <ExportButton\n            onExportPdf={handleExportTemplatesPdf}\n            onExportCsv={handleExportTemplatesCsv}\n          />\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Novo Template\n          </Button>\n        </Box>\n      </Box>\n\n      <Grid container spacing={3}>\n        {templates.map((template) => (\n          <Grid item xs={12} md={6} lg={4} key={template.id}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"flex-start\", mb: 2 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {template.name}\n                  </Typography>\n                  <Box sx={{ display: \"flex\", gap: 1 }}>\n                    {template.is_default && (\n                      <Chip label=\"Padrão\" size=\"small\" color=\"primary\" />\n                    )}\n                    <Chip\n                      label={getTypeLabel(template.type)}\n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Box>\n\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  {template.description}\n                </Typography>\n\n                <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1, mb: 2 }}>\n                  Usado {template.usage_count} vezes\n                </Typography>\n\n                <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n                  <Box>\n                    <Tooltip title=\"Visualizar\">\n                      <IconButton size=\"small\" onClick={() => handlePreviewTemplate(template)}>\n                        <PreviewIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Editar\">\n                      <IconButton size=\"small\" onClick={() => handleEditTemplate(template)}>\n                        <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Duplicar\">\n                      <IconButton size=\"small\">\n                        <CopyIcon />\n                      </IconButton>\n                    </Tooltip>\n                    {!template.is_default && (\n                      <Tooltip title=\"Excluir\">\n                        <IconButton\n                          size=\"small\"\n                          color=\"error\"\n                          onClick={() => handleDeleteTemplate(template.id)}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                  </Box>\n                  <Button\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={() => handleGenerateReport(template)}\n                  >\n                    Gerar Relatório\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Create Template Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Criar Novo Template</DialogTitle>\n        <DialogContent>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2, mt: 1 }}>\n            <TextField\n              label=\"Nome do Template\"\n              value={templateName}\n              onChange={(e) => setTemplateName(e.target.value)}\n              fullWidth\n            />\n            <TextField\n              label=\"Descrição\"\n              value={templateDescription}\n              onChange={(e) => setTemplateDescription(e.target.value)}\n              multiline\n              rows={3}\n              fullWidth\n            />\n            <FormControl fullWidth>\n              <InputLabel>Tipo do Relatório</InputLabel>\n              <Select\n                value={templateType}\n                onChange={(e) => setTemplateType(e.target.value)}\n              >\n                <MenuItem value=\"financial\">Financeiro</MenuItem>\n                <MenuItem value=\"payroll\">Folha de Pagamento</MenuItem>\n                <MenuItem value=\"compliance\">Compliance</MenuItem>\n                <MenuItem value=\"audit\">Auditoria</MenuItem>\n                <MenuItem value=\"custom\">Personalizado</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancelar</Button>\n          <Button onClick={handleCreateTemplate} variant=\"contained\" disabled={!templateName || loading}>\n            {loading ? \"Criando...\" : \"Criar Template\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Preview Template Dialog */}\n      <Dialog open={previewDialogOpen} onClose={() => setPreviewDialogOpen(false)} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>\n          Visualizar Template: {selectedTemplate?.name}\n        </DialogTitle>\n        <DialogContent>\n          <Paper sx={{ p: 2, bgcolor: \"grey.50\" }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Blocos do Relatório\n            </Typography>\n            <List>\n              {templateBlocks.map((block, index) => (\n                <ListItem key={block.id} sx={{ bgcolor: \"white\", mb: 1, borderRadius: 1 }}>\n                  <DragIcon sx={{ mr: 2, color: \"text.secondary\" }} />\n                  <ListItemText\n                    primary={block.title || getBlockTypeLabel(block.block_type)}\n                    secondary={`Tipo: ${getBlockTypeLabel(block.block_type)} | Largura: ${block.width_percentage}%`}\n                  />\n                  <ListItemSecondaryAction>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      #{block.position_order}\n                    </Typography>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setPreviewDialogOpen(false)}>Fechar</Button>\n          <Button variant=\"contained\" onClick={() => handleGenerateReport(selectedTemplate!)}>\n            Gerar Relatório\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ReportTemplatesPage;"],"names":["ReportTemplatesPage","templates","setTemplates","useState","blockTypes","setBlockTypes","selectedTemplate","setSelectedTemplate","templateBlocks","setTemplateBlocks","createDialogOpen","setCreateDialogOpen","editDialogOpen","setEditDialogOpen","previewDialogOpen","setPreviewDialogOpen","loading","setLoading","templateName","setTemplateName","templateDescription","setTemplateDescription","templateType","setTemplateType","useEffect","fetchTemplates","fetchBlockTypes","handleCreateTemplate","newTemplate","handleEditTemplate","template","handlePreviewTemplate","handleDeleteTemplate","templateId","t","handleGenerateReport","handleExportTemplatesPdf","handleExportTemplatesCsv","getTypeLabel","type","getBlockTypeLabel","blockType","bt","Box","jsxs","jsx","Typography","ExportButton","Button","AddIcon","Grid","Card","CardContent","Chip","Tooltip","IconButton","PreviewIcon","EditIcon","CopyIcon","DeleteIcon","Dialog","DialogTitle","DialogContent","TextField","e","FormControl","InputLabel","Select","MenuItem","DialogActions","Paper","List","block","index","ListItem","DragIcon","ListItemText","ListItemSecondaryAction"],"mappings":"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"}