{"version":3,"file":"useNeuralSignals-CYUyMUdZ.js","sources":["../../src/stores/intentionStore.ts","../../src/hooks/useNeuralSignals.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\ninterface MousePattern {\n  x: number;\n  y: number;\n  timestamp: number;\n  velocity: number;\n}\n\ninterface TypingPattern {\n  keystroke: string;\n  timestamp: number;\n  interval: number;\n}\n\ninterface UserIntention {\n  id: string;\n  type: 'navigation' | 'action' | 'data_view' | 'form_submission';\n  target: string;\n  confidence: number;\n  timestamp: number;\n  context: Record<string, any>;\n}\n\ninterface CognitiveLoad {\n  level: 'low' | 'medium' | 'high';\n  indicators: {\n    mouseHesitation: number;\n    errorFrequency: number;\n    navigationPatterns: number;\n    typingStress: number;\n  };\n  adaptationRequired: boolean;\n}\n\ninterface IntentionState {\n  // User interaction patterns\n  mousePatterns: MousePattern[];\n  typingPatterns: TypingPattern[];\n  hoverDuration: Record<string, number>;\n  \n  // Detected intentions\n  currentIntentions: UserIntention[];\n  intentionHistory: UserIntention[];\n  \n  // Cognitive load monitoring\n  cognitiveLoad: CognitiveLoad;\n  errorCount: Record<string, number>;\n  \n  // Predictive state\n  preloadedData: Record<string, any>;\n  speculativeRendering: Record<string, boolean>;\n  \n  // Actions\n  recordMouseMovement: (x: number, y: number) => void;\n  recordHover: (elementId: string, duration: number) => void;\n  recordKeypress: (key: string) => void;\n  recordError: (formId: string, errorType: string) => void;\n  detectIntention: (type: string, target: string, context?: any) => void;\n  updateCognitiveLoad: () => void;\n  requestPreload: (dataType: string, params: any) => void;\n  shouldShowEmpathicHelp: (formId: string) => boolean;\n  shouldAdaptUI: () => boolean;\n  getNavigationPredictions: () => Record<string, number>;\n  reset: () => void;\n}\n\nexport const useIntentionStore = create<IntentionState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      mousePatterns: [],\n      typingPatterns: [],\n      hoverDuration: {},\n      currentIntentions: [],\n      intentionHistory: [],\n      cognitiveLoad: {\n        level: 'low',\n        indicators: {\n          mouseHesitation: 0,\n          errorFrequency: 0,\n          navigationPatterns: 0,\n          typingStress: 0,\n        },\n        adaptationRequired: false,\n      },\n      errorCount: {},\n      preloadedData: {},\n      speculativeRendering: {},\n\n      // Record mouse movement patterns for neural signal detection\n      recordMouseMovement: (x: number, y: number) => {\n        const now = Date.now();\n        const patterns = get().mousePatterns;\n        const lastPattern = patterns[patterns.length - 1];\n        \n        let velocity = 0;\n        if (lastPattern) {\n          const deltaTime = now - lastPattern.timestamp;\n          const deltaDistance = Math.sqrt(\n            Math.pow(x - lastPattern.x, 2) + Math.pow(y - lastPattern.y, 2)\n          );\n          velocity = deltaDistance / (deltaTime || 1);\n        }\n\n        const newPattern: MousePattern = { x, y, timestamp: now, velocity };\n        \n        set((state) => ({\n          mousePatterns: [...state.mousePatterns.slice(-50), newPattern], // Keep last 50 movements\n        }));\n\n        // Analyze for hesitation patterns\n        if (velocity < 10 && patterns.length > 5) {\n          const recentLowVelocity = patterns.slice(-5).filter(p => p.velocity < 15).length;\n          if (recentLowVelocity >= 4) {\n            get().updateCognitiveLoad();\n          }\n        }\n      },\n\n      // Record hover duration for intention detection\n      recordHover: (elementId: string, duration: number) => {\n        set((state) => ({\n          hoverDuration: {\n            ...state.hoverDuration,\n            [elementId]: duration,\n          },\n        }));\n\n        // Detect hover intention (500ms threshold as per requirements)\n        if (duration > 500) {\n          get().detectIntention('action', elementId, { hoverDuration: duration });\n          \n          // Pre-load data for potential actions\n          if (elementId.includes('payroll') || elementId.includes('folha')) {\n            get().requestPreload('payroll_data', { elementId });\n          } else if (elementId.includes('client') || elementId.includes('cliente')) {\n            get().requestPreload('client_data', { elementId });\n          }\n        }\n      },\n\n      // Record typing patterns for stress detection\n      recordKeypress: (key: string) => {\n        const now = Date.now();\n        const patterns = get().typingPatterns;\n        const lastPattern = patterns[patterns.length - 1];\n        \n        const interval = lastPattern ? now - lastPattern.timestamp : 0;\n        \n        const newPattern: TypingPattern = {\n          keystroke: key,\n          timestamp: now,\n          interval,\n        };\n\n        set((state) => ({\n          typingPatterns: [...state.typingPatterns.slice(-20), newPattern], // Keep last 20 keystrokes\n        }));\n\n        // Analyze typing stress (very fast or very slow typing)\n        if (patterns.length >= 5) {\n          const recentIntervals = patterns.slice(-5).map(p => p.interval).filter(i => i > 0);\n          const avgInterval = recentIntervals.reduce((a, b) => a + b, 0) / recentIntervals.length;\n          \n          if (avgInterval < 50 || avgInterval > 1000) {\n            get().updateCognitiveLoad();\n          }\n        }\n      },\n\n      // Record errors for empathetic response system\n      recordError: (formId: string, errorType: string) => {\n        set((state) => ({\n          errorCount: {\n            ...state.errorCount,\n            [formId]: (state.errorCount[formId] || 0) + 1,\n          },\n        }));\n        \n        get().updateCognitiveLoad();\n      },\n\n      // Detect and record user intentions\n      detectIntention: (type: string, target: string, context = {}) => {\n        const now = Date.now();\n        const patterns = get().mousePatterns;\n        const hoverData = get().hoverDuration;\n        \n        // Calculate confidence based on interaction patterns\n        let confidence = 0.5; // Base confidence\n        \n        // Increase confidence based on hover duration\n        if (hoverData[target] > 500) confidence += 0.3;\n        if (hoverData[target] > 1000) confidence += 0.2;\n        \n        // Increase confidence based on mouse stability\n        const recentPatterns = patterns.slice(-10);\n        const velocityVariance = recentPatterns.reduce((acc, p) => acc + p.velocity, 0) / recentPatterns.length;\n        if (velocityVariance < 20) confidence += 0.2;\n\n        const intention: UserIntention = {\n          id: `${type}_${target}_${now}`,\n          type: type as any,\n          target,\n          confidence: Math.min(confidence, 1),\n          timestamp: now,\n          context,\n        };\n\n        set((state) => ({\n          currentIntentions: [...state.currentIntentions.slice(-5), intention],\n          intentionHistory: [...state.intentionHistory.slice(-50), intention],\n        }));\n\n        // Send intention to API for predictive processing\n        if (confidence > 0.7) {\n          get().sendIntentionToAPI(intention);\n        }\n      },\n\n      // Update cognitive load based on interaction patterns\n      updateCognitiveLoad: () => {\n        const state = get();\n        const { mousePatterns, errorCount, typingPatterns } = state;\n        \n        // Calculate indicators\n        const recentMouse = mousePatterns.slice(-20);\n        const mouseHesitation = recentMouse.filter(p => p.velocity < 10).length / recentMouse.length;\n        \n        const totalErrors = Object.values(errorCount).reduce((a, b) => a + b, 0);\n        const errorFrequency = totalErrors / Math.max(Object.keys(errorCount).length, 1);\n        \n        const recentTyping = typingPatterns.slice(-10);\n        const typingStress = recentTyping.filter(p => p.interval < 100 || p.interval > 800).length / recentTyping.length;\n        \n        const indicators = {\n          mouseHesitation,\n          errorFrequency,\n          navigationPatterns: 0, // Simplified for now\n          typingStress,\n        };\n        \n        // Calculate overall load level\n        const loadScore = (mouseHesitation + errorFrequency + typingStress) / 3;\n        let level: 'low' | 'medium' | 'high' = 'low';\n        \n        if (loadScore > 0.7) level = 'high';\n        else if (loadScore > 0.4) level = 'medium';\n        \n        const adaptationRequired = level === 'high' || errorFrequency > 2;\n        \n        set({\n          cognitiveLoad: {\n            level,\n            indicators,\n            adaptationRequired,\n          },\n        });\n      },\n\n      // Request data pre-loading\n      requestPreload: (dataType: string, params: any) => {\n        // In a real implementation, this would call the API\n        console.log(`ðŸ§  Neuro-Symbolic: Pre-loading ${dataType}`, params);\n        \n        // Simulate API call for pre-loading\n        setTimeout(() => {\n          set((state) => ({\n            preloadedData: {\n              ...state.preloadedData,\n              [dataType]: {\n                ...params,\n                data: `Pre-loaded data for ${dataType}`,\n                timestamp: Date.now(),\n              },\n            },\n          }));\n        }, 100);\n      },\n\n      // Check if empathetic help should be shown\n      shouldShowEmpathicHelp: (formId: string) => {\n        const errorCount = get().errorCount[formId] || 0;\n        return errorCount >= 3; // Show help after 3 errors as per requirements\n      },\n\n      // Check if UI should be adapted for cognitive load\n      shouldAdaptUI: () => {\n        return get().cognitiveLoad.adaptationRequired;\n      },\n\n      // Get navigation predictions based on user patterns\n      getNavigationPredictions: () => {\n        const { intentionHistory, currentIntentions } = get();\n        const predictions: Record<string, number> = {};\n        \n        // Analyze intention patterns to predict next navigation\n        const recentTargets = intentionHistory.slice(-10).map(i => i.target);\n        const targetCounts = recentTargets.reduce((acc, target) => {\n          acc[target] = (acc[target] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>);\n        \n        // Convert to probabilities\n        const total = recentTargets.length;\n        Object.keys(targetCounts).forEach(target => {\n          predictions[target] = targetCounts[target] / total;\n        });\n        \n        return predictions;\n      },\n\n      // Send intention to API for predictive processing\n      sendIntentionToAPI: async (intention: UserIntention) => {\n        try {\n          // This would be the actual API call in a real implementation\n          await fetch('/api/intentions', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(intention),\n          });\n        } catch (error) {\n          console.warn('Failed to send intention to API:', error);\n        }\n      },\n\n      // Reset the intention state\n      reset: () => {\n        set({\n          mousePatterns: [],\n          typingPatterns: [],\n          hoverDuration: {},\n          currentIntentions: [],\n          errorCount: {},\n          preloadedData: {},\n          speculativeRendering: {},\n          cognitiveLoad: {\n            level: 'low',\n            indicators: {\n              mouseHesitation: 0,\n              errorFrequency: 0,\n              navigationPatterns: 0,\n              typingStress: 0,\n            },\n            adaptationRequired: false,\n          },\n        });\n      },\n    }),\n    {\n      name: 'intention-store',\n    }\n  )\n);","import { useEffect, useRef, useCallback } from 'react';\nimport { useIntentionStore } from '../stores/intentionStore';\n\n/**\n * Hook for tracking neural signals through mouse movements and interactions\n */\nexport const useNeuralSignalTracking = () => {\n  const {\n    recordMouseMovement,\n    recordHover,\n    recordKeypress,\n    detectIntention,\n    updateCognitiveLoad,\n  } = useIntentionStore();\n\n  const hoverTimeouts = useRef<Record<string, NodeJS.Timeout>>({});\n  const hoverStartTimes = useRef<Record<string, number>>({});\n\n  // Track mouse movements for neural pattern detection\n  useEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      recordMouseMovement(event.clientX, event.clientY);\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, { passive: true });\n    \n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [recordMouseMovement]);\n\n  // Track keystrokes for typing pattern analysis\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      recordKeypress(event.key);\n      \n      // Detect form submission intentions\n      if (event.key === 'Enter') {\n        const target = event.target as HTMLElement;\n        if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n          detectIntention('form_submission', target.id || target.name || 'unknown_field');\n        }\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress, { passive: true });\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [recordKeypress, detectIntention]);\n\n  // Create hover tracking function for specific elements\n  const trackHover = useCallback((elementId: string, element: HTMLElement) => {\n    const handleMouseEnter = () => {\n      hoverStartTimes.current[elementId] = Date.now();\n      \n      // Set timeout to detect prolonged hover (intention signal)\n      hoverTimeouts.current[elementId] = setTimeout(() => {\n        const duration = Date.now() - hoverStartTimes.current[elementId];\n        recordHover(elementId, duration);\n        \n        // Special handling for payroll buttons (as per requirements)\n        if (elementId.includes('payroll') || elementId.includes('folha')) {\n          detectIntention('data_view', elementId, { \n            type: 'payroll_preview',\n            hoverDuration: duration \n          });\n        }\n      }, 500); // 500ms threshold as specified\n    };\n\n    const handleMouseLeave = () => {\n      if (hoverTimeouts.current[elementId]) {\n        clearTimeout(hoverTimeouts.current[elementId]);\n      }\n      \n      const startTime = hoverStartTimes.current[elementId];\n      if (startTime) {\n        const duration = Date.now() - startTime;\n        recordHover(elementId, duration);\n      }\n    };\n\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n\n    return () => {\n      element.removeEventListener('mouseenter', handleMouseEnter);\n      element.removeEventListener('mouseleave', handleMouseLeave);\n      if (hoverTimeouts.current[elementId]) {\n        clearTimeout(hoverTimeouts.current[elementId]);\n      }\n    };\n  }, [recordHover, detectIntention]);\n\n  return {\n    trackHover,\n    updateCognitiveLoad,\n  };\n};\n\n/**\n * Hook for elements that should trigger intention detection on hover\n */\nexport const useIntentionTrigger = (elementId: string, intentionType: 'navigation' | 'action' | 'data_view' = 'action') => {\n  const elementRef = useRef<HTMLElement>(null);\n  const { trackHover } = useNeuralSignalTracking();\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    return trackHover(elementId, element);\n  }, [elementId, trackHover]);\n\n  return elementRef;\n};\n\n/**\n * Hook for form error tracking and empathetic response\n */\nexport const useEmpathicForm = (formId: string) => {\n  const { recordError, shouldShowEmpathicHelp } = useIntentionStore();\n\n  const recordFormError = useCallback((errorType: string) => {\n    recordError(formId, errorType);\n  }, [formId, recordError]);\n\n  const needsEmpathicHelp = shouldShowEmpathicHelp(formId);\n\n  return {\n    recordFormError,\n    needsEmpathicHelp,\n  };\n};\n\n/**\n * Hook for adaptive UI based on cognitive load\n */\nexport const useAdaptiveUI = () => {\n  const { shouldAdaptUI, cognitiveLoad } = useIntentionStore();\n\n  const shouldSimplify = shouldAdaptUI();\n  const loadLevel = cognitiveLoad.level;\n\n  // UI adaptation strategies based on cognitive load\n  const getAdaptationStrategy = () => {\n    if (loadLevel === 'high') {\n      return {\n        hideAdvancedFeatures: true,\n        highlightPrimaryActions: true,\n        showHelpHints: true,\n        reduceAnimations: true,\n      };\n    } else if (loadLevel === 'medium') {\n      return {\n        hideAdvancedFeatures: false,\n        highlightPrimaryActions: true,\n        showHelpHints: false,\n        reduceAnimations: false,\n      };\n    }\n    \n    return {\n      hideAdvancedFeatures: false,\n      highlightPrimaryActions: false,\n      showHelpHints: false,\n      reduceAnimations: false,\n    };\n  };\n\n  return {\n    shouldSimplify,\n    loadLevel,\n    adaptationStrategy: getAdaptationStrategy(),\n    cognitiveLoad,\n  };\n};\n\n/**\n * Hook for predictive data pre-loading\n */\nexport const usePredictiveLoading = () => {\n  const { preloadedData, getNavigationPredictions, requestPreload } = useIntentionStore();\n\n  const predictions = getNavigationPredictions();\n  \n  // Pre-load data for high-probability navigation targets\n  const preloadHighProbabilityTargets = useCallback(() => {\n    Object.entries(predictions).forEach(([target, probability]) => {\n      if (probability > 0.9) { // 90% threshold as per requirements\n        if (target.includes('client') || target.includes('cliente')) {\n          requestPreload('client_data', { target });\n        } else if (target.includes('dashboard')) {\n          requestPreload('dashboard_metrics', { target });\n        } else if (target.includes('payroll') || target.includes('folha')) {\n          requestPreload('payroll_data', { target });\n        }\n      }\n    });\n  }, [predictions, requestPreload]);\n\n  // Check if data is already pre-loaded\n  const isDataPreloaded = useCallback((dataType: string) => {\n    return preloadedData[dataType] && \n           (Date.now() - preloadedData[dataType].timestamp) < 30000; // Valid for 30 seconds\n  }, [preloadedData]);\n\n  return {\n    predictions,\n    preloadedData,\n    preloadHighProbabilityTargets,\n    isDataPreloaded,\n  };\n};"],"names":["useIntentionStore","create","devtools","set","get","x","y","now","patterns","lastPattern","velocity","deltaTime","newPattern","state","p","elementId","duration","key","interval","recentIntervals","i","avgInterval","a","b","formId","errorType","type","target","context","hoverData","confidence","recentPatterns","acc","intention","mousePatterns","errorCount","typingPatterns","recentMouse","mouseHesitation","errorFrequency","recentTyping","typingStress","indicators","loadScore","level","adaptationRequired","dataType","params","intentionHistory","currentIntentions","predictions","recentTargets","targetCounts","total","error","useNeuralSignalTracking","recordMouseMovement","recordHover","recordKeypress","detectIntention","updateCognitiveLoad","hoverTimeouts","useRef","hoverStartTimes","useEffect","handleMouseMove","event","handleKeyPress","useCallback","element","handleMouseEnter","handleMouseLeave","startTime","useIntentionTrigger","intentionType","elementRef","trackHover","useEmpathicForm","recordError","shouldShowEmpathicHelp","recordFormError","needsEmpathicHelp","useAdaptiveUI","shouldAdaptUI","cognitiveLoad","shouldSimplify","loadLevel","usePredictiveLoading","preloadedData","getNavigationPredictions","requestPreload","preloadHighProbabilityTargets","probability","isDataPreloaded"],"mappings":"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"}