{"version":3,"file":"NeuroSymbolicDemo-CMBvCR70.js","sources":["../../src/components/ui/EmpathicTextField.tsx","../../src/pages/NeuroSymbolicDemo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  TextField,\n  TextFieldProps,\n  Box,\n  Alert,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n  Chip,\n} from '@mui/material';\nimport {\n  Psychology,\n  Help,\n  Lightbulb,\n  ErrorOutline,\n} from '@mui/icons-material';\nimport { useEmpathicForm } from '../../hooks/useNeuralSignals';\nimport { EmpathicHelpDialog } from '../../pages/ChatbotPage';\n\ninterface EmpathicTextFieldProps extends Omit<TextFieldProps, 'error' | 'helperText'> {\n  formId: string;\n  fieldName: string;\n  validationRules?: {\n    required?: boolean;\n    pattern?: RegExp;\n    minLength?: number;\n    maxLength?: number;\n    custom?: (value: string) => boolean;\n  };\n  empathicHelp?: {\n    errorType: string;\n    helpMessage?: string;\n    example?: string;\n  };\n}\n\nexport const EmpathicTextField: React.FC<EmpathicTextFieldProps> = ({\n  formId,\n  fieldName,\n  validationRules = {},\n  empathicHelp,\n  value,\n  onChange,\n  onBlur,\n  ...textFieldProps\n}) => {\n  const [localValue, setLocalValue] = useState(value || '');\n  const [errorState, setErrorState] = useState<string | null>(null);\n  const [errorCount, setErrorCount] = useState(0);\n  const [showEmpathicDialog, setShowEmpathicDialog] = useState(false);\n  const [hasUserInteracted, setHasUserInteracted] = useState(false);\n  \n  const { recordFormError, needsEmpathicHelp } = useEmpathicForm(formId);\n\n  // Validate field value\n  const validateField = (val: string): string | null => {\n    const { required, pattern, minLength, maxLength, custom } = validationRules;\n    \n    if (required && !val.trim()) {\n      return 'Este campo √© obrigat√≥rio';\n    }\n    \n    if (pattern && val && !pattern.test(val)) {\n      return 'Formato inv√°lido';\n    }\n    \n    if (minLength && val.length < minLength) {\n      return `M√≠nimo ${minLength} caracteres`;\n    }\n    \n    if (maxLength && val.length > maxLength) {\n      return `M√°ximo ${maxLength} caracteres`;\n    }\n    \n    if (custom && val && !custom(val)) {\n      return 'Valor inv√°lido';\n    }\n    \n    return null;\n  };\n\n  // Handle value changes\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setLocalValue(newValue);\n    setHasUserInteracted(true);\n    \n    // Clear error when user starts typing again\n    if (errorState) {\n      setErrorState(null);\n    }\n    \n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  // Handle blur (when user leaves the field)\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const validationError = validateField(localValue);\n    \n    if (validationError && hasUserInteracted) {\n      setErrorState(validationError);\n      setErrorCount(prev => prev + 1);\n      \n      // Record error for neural interface\n      recordFormError(empathicHelp?.errorType || 'validation_error');\n      \n      // Show empathic help after 3 errors (as per requirements)\n      if (errorCount >= 2) { // Will be 3 after increment\n        setShowEmpathicDialog(true);\n      }\n    }\n    \n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  // Auto-format common field types\n  const autoFormat = (val: string, type: string): string => {\n    switch (type) {\n      case 'phone':\n        // Format phone number: (11) 99999-9999\n        return val.replace(/\\D/g, '')\n          .replace(/(\\d{2})(\\d)/, '($1) $2')\n          .replace(/(\\d{4,5})(\\d{4})/, '$1-$2')\n          .slice(0, 15);\n      \n      case 'cnpj':\n        // Format CNPJ: 11.222.333/0001-44\n        return val.replace(/\\D/g, '')\n          .replace(/(\\d{2})(\\d)/, '$1.$2')\n          .replace(/(\\d{3})(\\d)/, '$1.$2')\n          .replace(/(\\d{3})(\\d)/, '$1/$2')\n          .replace(/(\\d{4})(\\d)/, '$1-$2')\n          .slice(0, 18);\n      \n      case 'cpf':\n        // Format CPF: 123.456.789-00\n        return val.replace(/\\D/g, '')\n          .replace(/(\\d{3})(\\d)/, '$1.$2')\n          .replace(/(\\d{3})(\\d)/, '$1.$2')\n          .replace(/(\\d{3})(\\d)/, '$1-$2')\n          .slice(0, 14);\n          \n      default:\n        return val;\n    }\n  };\n\n  // Handle auto-formatting on change\n  useEffect(() => {\n    if (empathicHelp?.errorType && localValue) {\n      const formatted = autoFormat(localValue, empathicHelp.errorType);\n      if (formatted !== localValue) {\n        setLocalValue(formatted);\n      }\n    }\n  }, [localValue, empathicHelp?.errorType]);\n\n  return (\n    <Box>\n      <TextField\n        {...textFieldProps}\n        value={localValue}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={!!errorState}\n        helperText={\n          errorState ? (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ErrorOutline sx={{ fontSize: 16 }} />\n              {errorState}\n              {errorCount >= 2 && (\n                <Chip \n                  label=\"Ajuda dispon√≠vel\" \n                  size=\"small\" \n                  color=\"warning\" \n                  icon={<Psychology />}\n                  onClick={() => setShowEmpathicDialog(true)}\n                />\n              )}\n            </Box>\n          ) : textFieldProps.helperText\n        }\n        InputProps={{\n          ...textFieldProps.InputProps,\n          endAdornment: (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              {textFieldProps.InputProps?.endAdornment}\n              {errorCount >= 2 && (\n                <Psychology \n                  color=\"warning\" \n                  sx={{ \n                    cursor: 'pointer',\n                    animation: 'pulse 2s infinite',\n                    '@keyframes pulse': {\n                      '0%': { opacity: 1 },\n                      '50%': { opacity: 0.5 },\n                      '100%': { opacity: 1 },\n                    },\n                  }}\n                  onClick={() => setShowEmpathicDialog(true)}\n                />\n              )}\n            </Box>\n          ),\n        }}\n      />\n\n      {/* Empathic Help Dialog */}\n      <EmpathicHelpDialog\n        open={showEmpathicDialog}\n        onClose={() => setShowEmpathicDialog(false)}\n        errorContext={{\n          formId,\n          errorType: empathicHelp?.errorType || 'validation_error',\n          errorCount: errorCount,\n        }}\n      />\n\n      {/* Adaptive hint for high error count */}\n      {errorCount >= 1 && errorCount < 3 && (\n        <Alert \n          severity=\"info\" \n          sx={{ mt: 1 }}\n          icon={<Lightbulb />}\n        >\n          üí° Dica: {getContextualHint(empathicHelp?.errorType)}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\n// Get contextual hints based on field type\nconst getContextualHint = (errorType?: string): string => {\n  switch (errorType) {\n    case 'email':\n      return 'Digite um email v√°lido como: usuario@empresa.com.br';\n    case 'phone':\n      return 'Use o formato: (11) 99999-9999';\n    case 'cnpj':\n      return 'Digite apenas n√∫meros, formata√ß√£o autom√°tica: 11222333000144';\n    case 'cpf':\n      return 'Digite apenas n√∫meros: 12345678900';\n    case 'date':\n      return 'Use o formato: DD/MM/AAAA';\n    default:\n      return 'Verifique se as informa√ß√µes est√£o corretas';\n  }\n};\n\nexport default EmpathicTextField;","import React, { useState } from 'react';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Box,\n  Grid,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Alert,\n  Chip,\n  Divider,\n} from '@mui/material';\nimport {\n  Psychology,\n  Speed,\n  Visibility,\n  Science,\n  AutoAwesome,\n} from '@mui/icons-material';\nimport { useIntentionStore } from '../stores/intentionStore';\nimport { useNeuralSignalTracking, useIntentionTrigger, usePredictiveLoading, useAdaptiveUI } from '../hooks/useNeuralSignals';\nimport EmpathicTextField from '../components/ui/EmpathicTextField';\n\nconst NeuroSymbolicDemo: React.FC = () => {\n  const [demoFormData, setDemoFormData] = useState({\n    email: '',\n    phone: '',\n    cnpj: '',\n  });\n\n  // Neural interface hooks\n  const {\n    currentIntentions,\n    cognitiveLoad,\n    preloadedData,\n    mousePatterns,\n    typingPatterns,\n    hoverDuration,\n  } = useIntentionStore();\n\n  const { predictions, isDataPreloaded } = usePredictiveLoading();\n  const { shouldSimplify, adaptationStrategy, loadLevel } = useAdaptiveUI();\n  \n  // Demo intention triggers\n  const demoButton1Ref = useIntentionTrigger(\"demo_button_1\", \"action\");\n  const demoButton2Ref = useIntentionTrigger(\"demo_button_2\", \"navigation\");\n  const demoButton3Ref = useIntentionTrigger(\"demo_button_3\", \"data_view\");\n\n  const handleFormSubmit = () => {\n    alert('üß† Formul√°rio processado com interface neuro-simb√≥lica!\\n\\nDados adaptados baseados nos seus padr√µes neurais.');\n  };\n\n  const triggerPrivacyIntention = () => {\n    // This will activate the LGPD Guardian\n    window.location.hash = '#lgpd-compliance';\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4, textAlign: 'center' }}>\n        <Typography variant=\"h3\" gutterBottom sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>\n          <Psychology color=\"primary\" />\n          Interface Neuro-Simb√≥lica\n          <AutoAwesome color=\"secondary\" />\n        </Typography>\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Demonstra√ß√£o do Di√°logo Preditivo entre Mente e M√°quina\n        </Typography>\n      </Box>\n\n      {/* Neural Status Panel */}\n      <Paper sx={{ p: 3, mb: 4, bgcolor: 'background.default' }}>\n        <Typography variant=\"h5\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Science color=\"primary\" />\n          Status Neural da Interface\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"primary\">\n                  üß† Sinais Neurais\n                </Typography>\n                <Typography variant=\"body2\">\n                  Movimentos do mouse: {mousePatterns.length}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Padr√µes de digita√ß√£o: {typingPatterns.length}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Elementos monitorados: {Object.keys(hoverDuration).length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"secondary\">\n                  üéØ Inten√ß√µes Detectadas\n                </Typography>\n                <Typography variant=\"body2\">\n                  Inten√ß√µes ativas: {currentIntentions.length}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Carga cognitiva: {cognitiveLoad.level.toUpperCase()}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Adapta√ß√£o necess√°ria: {cognitiveLoad.adaptationRequired ? 'Sim' : 'N√£o'}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"success\">\n                  üöÄ Dados Pr√©-carregados\n                </Typography>\n                <Typography variant=\"body2\">\n                  Cache entries: {Object.keys(preloadedData).length}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Predi√ß√µes: {Object.keys(predictions).length}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Interface adaptativa: {shouldSimplify ? 'Ativa' : 'Inativa'}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Demo Form with Empathetic Error Handling */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          üìù Formul√°rio com Tratamento Emp√°tico de Erros\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Tente cometer erros nos campos abaixo. Ap√≥s 3 erros, o assistente emp√°tico ser√° ativado.\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <EmpathicTextField\n              formId=\"demo_form\"\n              fieldName=\"email\"\n              label=\"Email\"\n              fullWidth\n              empathicHelp={{\n                errorType: 'email',\n                helpMessage: 'Emails devem ter formato v√°lido',\n                example: 'usuario@empresa.com.br'\n              }}\n              validationRules={{\n                required: true,\n                pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n              }}\n              value={demoFormData.email}\n              onChange={(e) => setDemoFormData(prev => ({ ...prev, email: e.target.value }))}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <EmpathicTextField\n              formId=\"demo_form\"\n              fieldName=\"phone\"\n              label=\"Telefone\"\n              fullWidth\n              empathicHelp={{\n                errorType: 'phone',\n                helpMessage: 'Telefones devem seguir o formato brasileiro',\n                example: '(11) 99999-9999'\n              }}\n              validationRules={{\n                required: true,\n                pattern: /^\\(\\d{2}\\) \\d{4,5}-\\d{4}$/\n              }}\n              value={demoFormData.phone}\n              onChange={(e) => setDemoFormData(prev => ({ ...prev, phone: e.target.value }))}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={4}>\n            <EmpathicTextField\n              formId=\"demo_form\"\n              fieldName=\"cnpj\"\n              label=\"CNPJ\"\n              fullWidth\n              empathicHelp={{\n                errorType: 'cnpj',\n                helpMessage: 'CNPJ deve ter 14 d√≠gitos',\n                example: '11.222.333/0001-44'\n              }}\n              validationRules={{\n                required: true,\n                pattern: /^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$/\n              }}\n              value={demoFormData.cnpj}\n              onChange={(e) => setDemoFormData(prev => ({ ...prev, cnpj: e.target.value }))}\n            />\n          </Grid>\n        </Grid>\n        \n        <Box sx={{ mt: 3 }}>\n          <Button variant=\"contained\" onClick={handleFormSubmit}>\n            Enviar Formul√°rio\n          </Button>\n        </Box>\n      </Paper>\n\n      {/* Intention Detection Demo */}\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          üéØ Demonstra√ß√£o de Detec√ß√£o de Inten√ß√µes\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Pouse o mouse sobre os bot√µes por mais de 500ms para ativar a detec√ß√£o neural de inten√ß√µes.\n        </Typography>\n        \n        <Grid container spacing={2}>\n          <Grid item>\n            <Button\n              ref={demoButton1Ref}\n              variant=\"outlined\"\n              color=\"primary\"\n              sx={{\n                '&:hover': {\n                  transform: 'scale(1.05)',\n                  transition: 'all 0.3s ease',\n                },\n              }}\n            >\n              Bot√£o de A√ß√£o\n            </Button>\n          </Grid>\n          \n          <Grid item>\n            <Button\n              ref={demoButton2Ref}\n              variant=\"outlined\"\n              color=\"secondary\"\n              sx={{\n                '&:hover': {\n                  transform: 'scale(1.05)',\n                  transition: 'all 0.3s ease',\n                },\n              }}\n            >\n              Navega√ß√£o\n            </Button>\n          </Grid>\n          \n          <Grid item>\n            <Button\n              ref={demoButton3Ref}\n              variant=\"outlined\"\n              color=\"success\"\n              sx={{\n                '&:hover': {\n                  transform: 'scale(1.05)',\n                  transition: 'all 0.3s ease',\n                },\n              }}\n            >\n              Visualizar Dados\n            </Button>\n          </Grid>\n          \n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              color=\"warning\"\n              onClick={triggerPrivacyIntention}\n            >\n              üõ°Ô∏è Ativar Guardi√£o LGPD\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Adaptive UI Demo */}\n      {shouldSimplify && (\n        <Alert severity=\"warning\" sx={{ mb: 4 }} icon={<Psychology />}>\n          <Typography variant=\"h6\">\n            üß† Interface Adaptativa Ativada\n          </Typography>\n          <Typography variant=\"body2\">\n            A interface detectou alta carga cognitiva e se adaptou automaticamente:\n          </Typography>\n          <Box sx={{ mt: 1 }}>\n            {adaptationStrategy.hideAdvancedFeatures && <Chip label=\"Recursos avan√ßados ocultos\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />}\n            {adaptationStrategy.highlightPrimaryActions && <Chip label=\"A√ß√µes prim√°rias destacadas\" color=\"info\" size=\"small\" sx={{ mr: 1 }} />}\n            {adaptationStrategy.showHelpHints && <Chip label=\"Dicas de ajuda ativas\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />}\n            {adaptationStrategy.reduceAnimations && <Chip label=\"Anima√ß√µes reduzidas\" color=\"secondary\" size=\"small\" />}\n          </Box>\n        </Alert>\n      )}\n\n      {/* Current Intentions Display */}\n      {currentIntentions.length > 0 && (\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Visibility color=\"primary\" />\n            Inten√ß√µes Neurais Detectadas\n          </Typography>\n          {currentIntentions.map((intention, index) => (\n            <Alert \n              key={intention.id} \n              severity=\"info\" \n              sx={{ mb: 1 }}\n              icon={<Speed />}\n            >\n              <Typography variant=\"body2\">\n                <strong>{intention.type}</strong> ‚Üí {intention.target} \n                (Confian√ßa: {(intention.confidence * 100).toFixed(0)}%)\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {new Date(intention.timestamp).toLocaleTimeString()}\n              </Typography>\n            </Alert>\n          ))}\n        </Paper>\n      )}\n    </Container>\n  );\n};\n\nexport default NeuroSymbolicDemo;"],"names":["EmpathicTextField","formId","fieldName","validationRules","empathicHelp","value","onChange","onBlur","textFieldProps","localValue","setLocalValue","useState","errorState","setErrorState","errorCount","setErrorCount","showEmpathicDialog","setShowEmpathicDialog","hasUserInteracted","setHasUserInteracted","recordFormError","useEmpathicForm","validateField","val","required","pattern","minLength","maxLength","custom","handleChange","event","newValue","handleBlur","validationError","prev","autoFormat","type","useEffect","formatted","Box","jsx","TextField","jsxs","ErrorOutline","Chip","Psychology","_a","EmpathicHelpDialog","Alert","Lightbulb","getContextualHint","errorType","NeuroSymbolicDemo","demoFormData","setDemoFormData","currentIntentions","cognitiveLoad","preloadedData","mousePatterns","typingPatterns","hoverDuration","useIntentionStore","predictions","usePredictiveLoading","shouldSimplify","adaptationStrategy","useAdaptiveUI","demoButton1Ref","useIntentionTrigger","demoButton2Ref","demoButton3Ref","handleFormSubmit","triggerPrivacyIntention","Container","Typography","AutoAwesome","Paper","Science","Grid","Card","CardContent","e","Button","Visibility","intention","index","Speed"],"mappings":"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"}