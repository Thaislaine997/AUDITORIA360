{"version":3,"file":"ChatbotPage-BFuHQRBY.js","sources":["../../src/pages/ChatbotPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { \n  Container, \n  Typography, \n  Paper, \n  Box,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  Avatar,\n  Chip,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@mui/material\";\nimport {\n  SmartToy,\n  Person,\n  Psychology,\n  Lightbulb,\n  Help,\n} from \"@mui/icons-material\";\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  context?: any;\n}\n\ninterface EmpathicHelpProps {\n  open: boolean;\n  onClose: () => void;\n  errorContext?: {\n    formId: string;\n    errorType: string;\n    errorCount: number;\n  };\n}\n\nconst EmpathicHelpDialog: React.FC<EmpathicHelpProps> = ({ open, onClose, errorContext }) => {\n  const [helpMessage, setHelpMessage] = useState(\"\");\n  const [example, setExample] = useState(\"\");\n\n  useEffect(() => {\n    if (errorContext) {\n      // Generate empathetic help based on error context\n      const { formId, errorType, errorCount } = errorContext;\n      \n      let message = `Percebi que este campo est√° a ser complicado (${errorCount} tentativas). `;\n      let exampleText = \"\";\n\n      switch (errorType) {\n        case 'email':\n          message += \"Posso ajudar com o formato do email?\";\n          exampleText = \"Exemplo correto: usuario@empresa.com.br\";\n          break;\n        case 'phone':\n          message += \"Vamos tentar com o formato de telefone?\";\n          exampleText = \"Exemplo correto: (11) 99999-9999\";\n          break;\n        case 'cnpj':\n          message += \"O CNPJ pode ser complicado. Deixe-me ajudar!\";\n          exampleText = \"Exemplo correto: 11.222.333/0001-44\";\n          break;\n        case 'date':\n          message += \"Datas podem ser confusas. Que tal este formato?\";\n          exampleText = \"Exemplo correto: 15/01/2024\";\n          break;\n        default:\n          message += \"Posso ajudar a preencher este campo corretamente?\";\n          exampleText = \"Vou gui√°-lo passo a passo.\";\n      }\n\n      setHelpMessage(message);\n      setExample(exampleText);\n    }\n  }, [errorContext]);\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <Psychology color=\"primary\" />\n        Assistente Emp√°tico\n      </DialogTitle>\n      <DialogContent>\n        <Alert severity=\"info\" sx={{ mb: 2 }} icon={<Lightbulb />}>\n          {helpMessage}\n        </Alert>\n        \n        {example && (\n          <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: 1, borderColor: 'divider' }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              <Help sx={{ fontSize: 16, mr: 1 }} />\n              Exemplo:\n            </Typography>\n            <Typography variant=\"body1\" sx={{ fontFamily: 'monospace', color: 'primary.main' }}>\n              {example}\n            </Typography>\n          </Box>\n        )}\n\n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            üí° <strong>Dica:</strong> A interface neural detectou que voc√™ pode precisar de ajuda. \n            Estou aqui para tornar este processo mais f√°cil e intuitivo.\n          </Typography>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>\n          Entendi, obrigado!\n        </Button>\n        <Button variant=\"contained\" onClick={onClose}>\n          Tentar novamente\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst ChatbotPage: React.FC = () => {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'system',\n      content: 'Ol√°! Sou o assistente emp√°tico da interface neuro-simb√≥lica. Como posso ajud√°-lo hoje?',\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    // Simulate AI response with empathetic understanding\n    setTimeout(() => {\n      const responses = [\n        \"Compreendo sua situa√ß√£o. A interface neural detectou alguns padr√µes que podem ajudar...\",\n        \"Baseado nos seus padr√µes de intera√ß√£o, posso sugerir uma abordagem mais eficiente...\", \n        \"Percebi que voc√™ est√° navegando pela √°rea de clientes. Posso pr√©-carregar os dados que voc√™ precisa?\",\n        \"Sua carga cognitiva parece elevada. Que tal simplificarmos a interface temporariamente?\",\n        \"Detectei hesita√ß√£o no mouse. Posso explicar melhor essa funcionalidade?\",\n      ];\n\n      const assistantMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: responses[Math.floor(Math.random() * responses.length)],\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n      setIsTyping(false);\n    }, 1000 + Math.random() * 2000);\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>\n        <Psychology color=\"primary\" />\n        <Typography variant=\"h4\" gutterBottom>\n          Assistente Neuro-Simb√≥lico\n        </Typography>\n        <Chip \n          label=\"Interface Emp√°tica Ativa\" \n          color=\"success\" \n          icon={<SmartToy />}\n          size=\"small\"\n        />\n      </Box>\n      \n      <Paper sx={{ height: 500, display: 'flex', flexDirection: 'column' }}>\n        {/* Messages area */}\n        <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n          <List>\n            {messages.map((message) => (\n              <ListItem \n                key={message.id} \n                sx={{ \n                  justifyContent: message.type === 'user' ? 'flex-end' : 'flex-start',\n                  mb: 1,\n                }}\n              >\n                <Box \n                  sx={{ \n                    display: 'flex', \n                    alignItems: 'flex-start',\n                    gap: 1,\n                    maxWidth: '70%',\n                    flexDirection: message.type === 'user' ? 'row-reverse' : 'row',\n                  }}\n                >\n                  <Avatar \n                    sx={{ \n                      bgcolor: message.type === 'user' ? 'primary.main' : 'secondary.main',\n                      width: 32,\n                      height: 32,\n                    }}\n                  >\n                    {message.type === 'user' ? <Person /> : <Psychology />}\n                  </Avatar>\n                  \n                  <Paper \n                    elevation={1}\n                    sx={{ \n                      p: 2, \n                      bgcolor: message.type === 'user' ? 'primary.light' : 'background.paper',\n                      color: message.type === 'user' ? 'white' : 'text.primary',\n                    }}\n                  >\n                    <Typography variant=\"body1\">\n                      {message.content}\n                    </Typography>\n                    <Typography \n                      variant=\"caption\" \n                      sx={{ \n                        opacity: 0.7,\n                        display: 'block',\n                        mt: 0.5,\n                      }}\n                    >\n                      {message.timestamp.toLocaleTimeString()}\n                    </Typography>\n                  </Paper>\n                </Box>\n              </ListItem>\n            ))}\n            \n            {isTyping && (\n              <ListItem sx={{ justifyContent: 'flex-start' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Avatar sx={{ bgcolor: 'secondary.main', width: 32, height: 32 }}>\n                    <Psychology />\n                  </Avatar>\n                  <Paper elevation={1} sx={{ p: 2 }}>\n                    <Typography variant=\"body1\" sx={{ fontStyle: 'italic' }}>\n                      üß† Processando sinais neurais...\n                    </Typography>\n                  </Paper>\n                </Box>\n              </ListItem>\n            )}\n          </List>\n        </Box>\n        \n        {/* Input area */}\n        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              fullWidth\n              placeholder=\"Digite sua mensagem... (A interface neural est√° escutando)\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              multiline\n              maxRows={3}\n              variant=\"outlined\"\n              size=\"small\"\n            />\n            <Button \n              variant=\"contained\" \n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || isTyping}\n              sx={{ minWidth: 100 }}\n            >\n              Enviar\n            </Button>\n          </Box>\n          \n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n            üí° Este chatbot entende o contexto das suas intera√ß√µes e adapta-se ao seu estado cognitivo\n          </Typography>\n        </Box>\n      </Paper>\n\n      <Alert severity=\"info\" sx={{ mt: 2 }} icon={<Psychology />}>\n        <strong>Interface Neuro-Simb√≥lica Ativa:</strong> Este assistente √© acionado automaticamente \n        quando a interface detecta frustra√ß√£o ou dificuldades (ex: 3+ erros no mesmo formul√°rio).\n        Ele oferece ajuda contextual e emp√°tica baseada nos seus padr√µes de intera√ß√£o.\n      </Alert>\n    </Container>\n  );\n};\n\n// Export both components for use in other parts of the application\nexport default ChatbotPage;\nexport { EmpathicHelpDialog };\n"],"names":["EmpathicHelpDialog","open","onClose","errorContext","helpMessage","setHelpMessage","useState","example","setExample","useEffect","formId","errorType","errorCount","message","exampleText","Dialog","jsxs","DialogTitle","jsx","Psychology","DialogContent","Alert","Lightbulb","Box","Typography","Help","DialogActions","Button","ChatbotPage","messages","setMessages","inputMessage","setInputMessage","isTyping","setIsTyping","handleSendMessage","userMessage","prev","responses","assistantMessage","handleKeyPress","event","Container","Chip","SmartToy","Paper","List","ListItem","Avatar","Person","TextField","e"],"mappings":"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"}