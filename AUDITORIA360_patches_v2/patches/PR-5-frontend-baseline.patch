--- /dev/null
+++ b/frontend/tsconfig.json
@@ -0,0 +1,20 @@
+{
+  "compilerOptions": {
+    "target": "ES2022",
+    "module": "ESNext",
+    "lib": ["DOM", "ES2022"],
+    "jsx": "react-jsx",
+    "strict": true,
+    "moduleResolution": "node",
+    "esModuleInterop": true,
+    "skipLibCheck": true,
+    "forceConsistentCasingInFileNames": true,
+    "baseUrl": "./src",
+    "paths": {
+      "@/components/*": ["components/*"],
+      "@/utils/*": ["utils/*"]
+    }
+  },
+  "include": ["src/**/*"],
+  "exclude": ["node_modules", "dist"]
+}

--- /dev/null
+++ b/frontend/.eslintrc.cjs
@@ -0,0 +1,19 @@
+module.exports = {
+  root: true,
+  parser: '@typescript-eslint/parser',
+  parserOptions: { project: ['./tsconfig.json'] },
+  plugins: ['@typescript-eslint', 'react', 'react-hooks', 'jsx-a11y'],
+  extends: [
+    'eslint:recommended',
+    'plugin:@typescript-eslint/recommended',
+    'plugin:react/recommended',
+    'plugin:jsx-a11y/recommended',
+    'prettier'
+  ],
+  settings: { react: { version: 'detect' } },
+  rules: {
+    'react/react-in-jsx-scope': 'off',
+    '@typescript-eslint/explicit-module-boundary-types': 'off',
+    '@typescript-eslint/no-explicit-any': 'warn'
+  }
+}

--- /dev/null
+++ b/frontend/.prettierrc
@@ -0,0 +1,6 @@
+{
+  "singleQuote": true,
+  "semi": true,
+  "trailingComma": "es5",
+  "printWidth": 100
+}

--- /dev/null
+++ b/frontend/tailwind.config.cjs
@@ -0,0 +1,23 @@
+module.exports = {
+  content: ['./src/**/*.{js,ts,jsx,tsx,html}'],
+  darkMode: 'class',
+  theme: {
+    extend: {
+      colors: {
+        primary: {
+          50: '#eef2ff',
+          100: '#e0e7ff',
+          500: '#6366f1',
+          700: '#4f46e5'
+        },
+        brand: {
+          50: '#f0fdf4',
+          100: '#dcfce7',
+          500: '#10b981'
+        }
+      },
+      borderRadius: { xl: '1rem' }
+    }
+  },
+  plugins: []
+};

--- /dev/null
+++ b/frontend/postcss.config.cjs
@@ -0,0 +1,6 @@
+module.exports = {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {}
+  }
+}

--- /dev/null
+++ b/frontend/src/components/Button.tsx
@@ -0,0 +1,20 @@
+import React from 'react'
+
+type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {
+  variant?: 'primary' | 'secondary' | 'ghost'
+}
+
+export default function Button({ variant = 'primary', children, ...rest }: Props) {
+  const base = 'px-4 py-2 rounded-xl font-medium transition-shadow focus:outline-none'
+  const variants = {
+    primary: 'bg-primary-500 text-white hover:bg-primary-700',
+    secondary: 'bg-white border border-gray-200 text-gray-800',
+    ghost: 'bg-transparent text-primary-500'
+  } as const
+  const cls = `${base} ${variants[variant]}`
+  return (
+    <button className={cls} {...rest}>
+      {children}
+    </button>
+  )
+}

--- /dev/null
+++ b/frontend/src/components/Card.tsx
@@ -0,0 +1,9 @@
+import React from 'react'
+
+export default function Card({ children, className = '' }: React.PropsWithChildren<{ className?: string }>) {
+  return (
+    <div className={`bg-white dark:bg-gray-800 shadow-sm rounded-2xl p-4 ${className}`}>
+      {children}
+    </div>
+  )
+}

--- /dev/null
+++ b/frontend/src/components/Table.tsx
@@ -0,0 +1,30 @@
+import React from 'react'
+
+export default function Table({ columns, data }: { columns: string[]; data: any[] }) {
+  return (
+    <div className="overflow-x-auto">
+      <table className="min-w-full text-left text-sm">
+        <thead>
+          <tr>
+            {columns.map((c) => (
+              <th key={c} className="px-3 py-2 text-gray-600">
+                {c}
+              </th>
+            ))}
+          </tr>
+        </thead>
+        <tbody>
+          {data.map((row, i) => (
+            <tr key={i} className="border-t even:bg-gray-50">
+              {columns.map((c) => (
+                <td key={c} className="px-3 py-2">
+                  {row[c]}
+                </td>
+              ))}
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  )
+}

--- /dev/null
+++ b/frontend/src/components/Header.tsx
@@ -0,0 +1,17 @@
+import React from 'react'
+import Button from './Button'
+
+export default function Header() {
+  return (
+    <header className="flex items-center justify-between p-4">
+      <div className="flex items-center gap-3">
+        <div className="w-10 h-10 rounded-lg bg-primary-500" />
+        <h1 className="text-lg font-semibold">Auditoria360</h1>
+      </div>
+      <div className="flex items-center gap-2">
+        <Button variant="ghost">Ajuda</Button>
+        <Button>Exportar</Button>
+      </div>
+    </header>
+  )
+}

--- /dev/null
+++ b/frontend/src/components/ThemeProvider.tsx
@@ -0,0 +1,22 @@
+import React, { createContext, useEffect, useState } from 'react'
+
+type Theme = 'light' | 'dark'
+const ThemeContext = createContext({ theme: 'light' as Theme, toggle: () => {} })
+
+export function ThemeProvider({ children }: React.PropsWithChildren) {
+  const [theme, setTheme] = useState<Theme>(() => {
+    if (typeof window === 'undefined') return 'light'
+    return (localStorage.getItem('theme') as Theme) || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
+  })
+
+  useEffect(() => {
+    const root = document.documentElement
+    if (theme === 'dark') root.classList.add('dark')
+    else root.classList.remove('dark')
+    localStorage.setItem('theme', theme)
+  }, [theme])
+
+  return <ThemeContext.Provider value={{ theme, toggle: () => setTheme(t => (t === 'dark' ? 'light' : 'dark')) }}>{children}</ThemeContext.Provider>
+}
+
+export default ThemeContext

