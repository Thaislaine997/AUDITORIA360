-- =====================================================================
-- SCRIPT SQL UNIFICADO - AUDITORIA360 - FASE DE PRODUÇÃO
-- =====================================================================
-- Este script prepara toda a base de dados, incluindo:
-- 1. Criação das tabelas de Contabilidades e Perfis de Utilizadores.
-- 2. Alteração da tabela de Empresas para suportar multi-tenant.
-- 3. Inserção dos dados das suas contabilidades.
-- 4. Criação de tabelas que faltavam (ex: TarefasControle).
-- 5. Habilitação e configuração da Segurança a Nível de Linha (RLS).
-- =====================================================================

-- PARTE 1: ESTRUTURA DA BASE DE DADOS (SCHEMA)

-- PASSO 1.1: Criar a tabela para as empresas de contabilidade.
CREATE TABLE IF NOT EXISTS public."Contabilidades" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_contabilidade TEXT NOT NULL,
    cnpj TEXT NOT NULL UNIQUE,
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public."Contabilidades" IS 'Armazena as empresas de contabilidade que usam o sistema (tenants).';

-- PASSO 1.2: [CORREÇÃO] Criar a tabela de Perfis para ligar utilizadores a contabilidades.
-- Esta tabela é ESSENCIAL para a segurança funcionar. Ela associa cada utilizador autenticado
-- (através do seu ID único da Supabase) a uma das contabilidades.
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  contabilidade_id BIGINT REFERENCES public."Contabilidades"(id) ON DELETE SET NULL,
  full_name TEXT,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.profiles IS 'Tabela de perfis que estende auth.users com dados da aplicação, como a qual contabilidade o utilizador pertence.';

-- PASSO 1.3: Criar a tabela de Empresas (clientes) se não existir
CREATE TABLE IF NOT EXISTS public."Empresas" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome TEXT NOT NULL,
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- PASSO 1.4: Adicionar a ligação e os novos campos na tabela de Empresas (clientes).
ALTER TABLE public."Empresas"
ADD COLUMN IF NOT EXISTS contabilidade_id BIGINT REFERENCES public."Contabilidades"(id) ON DELETE SET NULL,
ADD COLUMN IF NOT EXISTS data_inclusao DATE DEFAULT CURRENT_DATE,
ADD COLUMN IF NOT EXISTS data_exclusao DATE,
ADD COLUMN IF NOT EXISTS detalhes_personalizados JSONB;

COMMENT ON COLUMN public."Empresas".contabilidade_id IS 'Chave estrangeira que liga a empresa cliente à sua respetiva contabilidade.';
COMMENT ON COLUMN public."Empresas".detalhes_personalizados IS 'Campo flexível para armazenar detalhes específicos do cliente em formato JSON.';

-- PASSO 1.5: Criar um índice para acelerar a busca de empresas por contabilidade.
CREATE INDEX IF NOT EXISTS idx_empresas_contabilidade_id ON public."Empresas" (contabilidade_id);

-- PASSO 1.6: Criar a tabela ControlesMensais se não existir
CREATE TABLE IF NOT EXISTS public."ControlesMensais" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT REFERENCES public."Empresas"(id) ON DELETE CASCADE,
    mes INTEGER NOT NULL,
    ano INTEGER NOT NULL,
    status TEXT DEFAULT 'PENDENTE',
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public."ControlesMensais" IS 'Controles mensais das empresas para auditoria.';

-- PASSO 1.7: [CORREÇÃO] Criar a tabela 'TarefasControle' que faltava no script de limpeza.
-- Assumindo uma estrutura simples. Ajuste as colunas conforme a sua necessidade.
CREATE TABLE IF NOT EXISTS public."TarefasControle" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    controle_mensal_id BIGINT REFERENCES public."ControlesMensais"(id) ON DELETE CASCADE,
    descricao_tarefa TEXT NOT NULL,
    concluida BOOLEAN DEFAULT FALSE,
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public."TarefasControle" IS 'Tarefas específicas associadas a um controle mensal de uma empresa.';


-- PARTE 2: INSERÇÃO DOS DADOS INICIAIS

-- PASSO 2.1: Popular a tabela de Contabilidades.
-- O comando ON CONFLICT garante que não haverá erros se o script for executado mais de uma vez.
INSERT INTO public."Contabilidades" (nome_contabilidade, cnpj)
VALUES
    ('Elaine Cristina da Silva Contabilidade', '21.391.377/0001-99'),
    ('CONTROLLER SOLUCOES LTDA', '21.719.740/0001-52'),
    ('CKONT ASSESSORIA EMPRESARIAL LTDA', '50.215.504/0001-05'),
    ('VENDEDOR CONTABIL CONTABILIDADE E CONSULTORIA EMPRESARIAL LTDA', '47.229.784/0001-98')
ON CONFLICT (cnpj) DO NOTHING;


-- PARTE 3: IMPLEMENTAÇÃO DA SEGURANÇA (ROW LEVEL SECURITY)

-- PASSO 3.1: Habilitar RLS em todas as tabelas com dados sensíveis.
ALTER TABLE public."Empresas" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."ControlesMensais" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."Documentos" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."TarefasControle" ENABLE ROW LEVEL SECURITY;
-- Adicione outras tabelas aqui se necessário.

-- PASSO 3.2: Apagar políticas antigas (se existirem) para evitar conflitos.
DROP POLICY IF EXISTS "Utilizadores podem ver apenas empresas da sua contabilidade" ON public."Empresas";
DROP POLICY IF EXISTS "Utilizadores podem inserir empresas apenas para a sua contabilidade" ON public."Empresas";
DROP POLICY IF EXISTS "Acesso total para administradores de empresas" ON public."Empresas";
DROP POLICY IF EXISTS "Utilizadores podem ver controles apenas das suas empresas" ON public."ControlesMensais";
DROP POLICY IF EXISTS "Acesso total para administradores de controles" ON public."ControlesMensais";

-- PASSO 3.3: Criar as novas políticas de segurança (corrigidas).
-- Estas políticas usam uma função para obter o contabilidade_id do utilizador logado.
-- Criar uma função auxiliar para simplificar as políticas
CREATE OR REPLACE FUNCTION auth.get_contabilidade_id()
RETURNS BIGINT
LANGUAGE sql
STABLE
AS $$
  SELECT contabilidade_id
  FROM public.profiles
  WHERE id = auth.uid();
$$;

-- Política para a tabela de Empresas:
CREATE POLICY "Acesso total para administradores de empresas" ON public."Empresas"
FOR ALL -- Permite SELECT, INSERT, UPDATE, DELETE
USING (auth.get_contabilidade_id() = contabilidade_id)
WITH CHECK (auth.get_contabilidade_id() = contabilidade_id);

-- Política para a tabela de Controles Mensais (exemplo de JOIN na política):
CREATE POLICY "Acesso total para administradores de controles" ON public."ControlesMensais"
FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM public."Empresas" e
    WHERE e.id = "ControlesMensais".empresa_id AND e.contabilidade_id = auth.get_contabilidade_id()
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public."Empresas" e
    WHERE e.id = "ControlesMensais".empresa_id AND e.contabilidade_id = auth.get_contabilidade_id()
  )
);

-- Política para a tabela de Documentos (assumindo que documentos pertencem a empresas):
CREATE POLICY "Acesso a documentos da contabilidade" ON public."Documentos"
FOR ALL
USING (
  -- Esta implementação assume que existe uma relação entre Documentos e Empresas
  -- Ajuste conforme a estrutura real dos seus dados
  true -- Por agora, permitir acesso a todos os documentos. Refine conforme necessário.
);

-- Política para TarefasControle:
CREATE POLICY "Acesso a tarefas de controle da contabilidade" ON public."TarefasControle"
FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM public."ControlesMensais" cm
    JOIN public."Empresas" e ON cm.empresa_id = e.id
    WHERE cm.id = "TarefasControle".controle_mensal_id 
    AND e.contabilidade_id = auth.get_contabilidade_id()
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public."ControlesMensais" cm
    JOIN public."Empresas" e ON cm.empresa_id = e.id
    WHERE cm.id = "TarefasControle".controle_mensal_id 
    AND e.contabilidade_id = auth.get_contabilidade_id()
  )
);

-- NOTA: Crie políticas semelhantes para outras tabelas que precisem de isolamento de dados


-- PARTE 4: LIMPEZA DE DADOS DE EXEMPLO (OPCIONAL)

-- PASSO 4.1: Script para apagar DADOS DE TESTE.
-- CUIDADO: Use este comando apenas uma vez antes da importação final. Ele apaga
-- PERMANENTEMENTE todos os dados das tabelas listadas.
/* -- Descomente para executar
TRUNCATE TABLE
    public."Empresas",
    public."ControlesMensais",
    public."TarefasControle",
    public."Documentos"
RESTART IDENTITY CASCADE;
*/

-- =====================================================================
-- FIM DO SCRIPT
-- =====================================================================