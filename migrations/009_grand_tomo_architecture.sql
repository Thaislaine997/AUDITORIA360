-- =====================================================================
-- AUDITORIA360 - GRAND TOMO ARCHITECTURE IMPLEMENTATION
-- =====================================================================
-- This migration implements the comprehensive ecosystem described in the
-- problem statement, adding all missing tables and relationships for:
-- 1. Audit Trail System (LOGOPERACOES)
-- 2. Tax Declarations Integration (DeclaracoesFiscais)
-- 3. Accounting Integration (LancamentosContabeis, PlanosContas)
-- 4. Notification System (Notificacoes, AlertasPrazos)
-- 5. Support System (AtendimentosSuporte)
-- =====================================================================

-- PART 1: AUDIT TRAIL SYSTEM
-- The "immutable memory" of the system - every write operation is logged

CREATE TABLE IF NOT EXISTS public."LOGOPERACOES" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    contabilidade_id BIGINT REFERENCES public."Contabilidades"(id) ON DELETE SET NULL,
    operacao TEXT NOT NULL, -- Type of operation (CREATE, UPDATE, DELETE, etc.)
    tabela_afetada TEXT NOT NULL, -- Which table was affected
    registro_id TEXT, -- ID of the affected record
    detalhes_operacao JSONB NOT NULL, -- Complete details of the operation
    timestamp_operacao TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    ip_origem INET, -- IP address of the operation origin
    user_agent TEXT, -- Browser/client information
    session_id TEXT, -- Session identifier
    resultado TEXT DEFAULT 'SUCCESS' NOT NULL -- SUCCESS, ERROR, WARNING
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_logoperacoes_timestamp 
ON public."LOGOPERACOES" (timestamp_operacao DESC);

CREATE INDEX IF NOT EXISTS idx_logoperacoes_user_contabilidade 
ON public."LOGOPERACOES" (user_id, contabilidade_id);

CREATE INDEX IF NOT EXISTS idx_logoperacoes_operacao_tabela 
ON public."LOGOPERACOES" (operacao, tabela_afetada);

COMMENT ON TABLE public."LOGOPERACOES" IS 'Immutable audit trail - every write operation in the system is logged here';

-- PART 2: TAX DECLARATIONS INTEGRATION
-- For cross-referencing payroll calculations with official declarations

CREATE TABLE IF NOT EXISTS public."DeclaracoesFiscais" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT NOT NULL REFERENCES public."Empresas"(id) ON DELETE CASCADE,
    tipo_declaracao TEXT NOT NULL, -- DCTFWeb, DIRF, GFIP, eSocial, etc.
    periodo_competencia DATE NOT NULL, -- Competency period (YYYY-MM-DD)
    numero_recibo TEXT, -- Receipt number from tax authority
    data_transmissao TIMESTAMPTZ, -- When it was transmitted
    status_declaracao TEXT DEFAULT 'PENDENTE' NOT NULL, -- PENDENTE, TRANSMITIDA, HOMOLOGADA, REJEITADA
    valores_declarados JSONB NOT NULL, -- All declared values in structured format
    arquivo_original TEXT, -- Path to original file
    hash_arquivo TEXT, -- File hash for integrity verification
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Indexes for cross-referencing performance
CREATE INDEX IF NOT EXISTS idx_declaracoes_fiscais_empresa_periodo 
ON public."DeclaracoesFiscais" (empresa_id, periodo_competencia);

CREATE INDEX IF NOT EXISTS idx_declaracoes_fiscais_tipo_status 
ON public."DeclaracoesFiscais" (tipo_declaracao, status_declaracao);

COMMENT ON TABLE public."DeclaracoesFiscais" IS 'Tax declarations for cross-referencing with payroll audits';

-- PART 3: ACCOUNTING INTEGRATION
-- Chart of Accounts and Accounting Entries

CREATE TABLE IF NOT EXISTS public."PlanosContas" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT NOT NULL REFERENCES public."Empresas"(id) ON DELETE CASCADE,
    codigo_conta TEXT NOT NULL, -- Account code (e.g., "1.1.1.01.001")
    nome_conta TEXT NOT NULL, -- Account name
    tipo_conta TEXT NOT NULL, -- ATIVO, PASSIVO, PATRIMONIO_LIQUIDO, RECEITA, DESPESA
    conta_pai_id BIGINT REFERENCES public."PlanosContas"(id), -- Parent account for hierarchical structure
    nivel INTEGER NOT NULL DEFAULT 1, -- Hierarchy level
    aceita_lancamento BOOLEAN DEFAULT TRUE NOT NULL, -- Whether this account accepts entries
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    UNIQUE(empresa_id, codigo_conta)
);

CREATE INDEX IF NOT EXISTS idx_planos_contas_empresa_codigo 
ON public."PlanosContas" (empresa_id, codigo_conta);

CREATE INDEX IF NOT EXISTS idx_planos_contas_tipo_nivel 
ON public."PlanosContas" (tipo_conta, nivel);

COMMENT ON TABLE public."PlanosContas" IS 'Chart of accounts for each company - used for automatic accounting entry drafts';

CREATE TABLE IF NOT EXISTS public."LancamentosContabeis" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT NOT NULL REFERENCES public."Empresas"(id) ON DELETE CASCADE,
    numero_lancamento TEXT NOT NULL, -- Entry number
    data_lancamento DATE NOT NULL,
    historico TEXT NOT NULL, -- Entry description
    valor_total DECIMAL(15,2) NOT NULL,
    origem_lancamento TEXT NOT NULL, -- FOLHA_PAGAMENTO, AUDITORIA_IA, MANUAL, etc.
    referencia_origem_id BIGINT, -- ID of the source record (e.g., ProcessamentosFolha.id)
    status_lancamento TEXT DEFAULT 'RASCUNHO' NOT NULL, -- RASCUNHO, APROVADO, CONTABILIZADO, CANCELADO
    aprovado_por UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    aprovado_em TIMESTAMPTZ,
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    UNIQUE(empresa_id, numero_lancamento)
);

CREATE TABLE IF NOT EXISTS public."LancamentosContabeisItens" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lancamento_id BIGINT NOT NULL REFERENCES public."LancamentosContabeis"(id) ON DELETE CASCADE,
    conta_id BIGINT NOT NULL REFERENCES public."PlanosContas"(id) ON DELETE CASCADE,
    tipo_movimentacao TEXT NOT NULL CHECK (tipo_movimentacao IN ('DEBITO', 'CREDITO')),
    valor DECIMAL(15,2) NOT NULL,
    historico_item TEXT,
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_lancamentos_contabeis_empresa_data 
ON public."LancamentosContabeis" (empresa_id, data_lancamento DESC);

CREATE INDEX IF NOT EXISTS idx_lancamentos_contabeis_origem 
ON public."LancamentosContabeis" (origem_lancamento, referencia_origem_id);

COMMENT ON TABLE public."LancamentosContabeis" IS 'Accounting entries - automatically generated drafts from audit processes';
COMMENT ON TABLE public."LancamentosContabeisItens" IS 'Individual debit/credit items for each accounting entry';

-- PART 4: NOTIFICATION SYSTEM
-- Proactive communication system

CREATE TABLE IF NOT EXISTS public."Notificacoes" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    contabilidade_id BIGINT REFERENCES public."Contabilidades"(id) ON DELETE SET NULL,
    tipo_notificacao TEXT NOT NULL, -- INFO, ALERTA, ERRO, SUCESSO
    titulo TEXT NOT NULL,
    mensagem TEXT NOT NULL,
    link_acao TEXT, -- URL to take action
    prioridade TEXT DEFAULT 'MEDIA' NOT NULL, -- BAIXA, MEDIA, ALTA, CRITICA
    lida BOOLEAN DEFAULT FALSE NOT NULL,
    data_leitura TIMESTAMPTZ,
    origem_notificacao TEXT, -- Which system generated this notification
    dados_contexto JSONB, -- Additional context data
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    expira_em TIMESTAMPTZ -- Expiration date for the notification
);

CREATE INDEX IF NOT EXISTS idx_notificacoes_usuario_lida 
ON public."Notificacoes" (usuario_id, lida);

CREATE INDEX IF NOT EXISTS idx_notificacoes_prioridade_criado 
ON public."Notificacoes" (prioridade, criado_em DESC);

COMMENT ON TABLE public."Notificacoes" IS 'Notification system - proactive communication with users';

CREATE TABLE IF NOT EXISTS public."AlertasPrazos" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT NOT NULL REFERENCES public."Empresas"(id) ON DELETE CASCADE,
    tipo_prazo TEXT NOT NULL, -- CCT_VENCIMENTO, DECLARACAO_FISCAL, AUDITORIA_MENSAL, etc.
    descricao TEXT NOT NULL,
    data_vencimento DATE NOT NULL,
    dias_antecedencia INTEGER DEFAULT 7 NOT NULL, -- Days before deadline to trigger alert
    status_alerta TEXT DEFAULT 'ATIVO' NOT NULL, -- ATIVO, DISPARADO, CONCLUIDO, CANCELADO
    ultimo_disparo TIMESTAMPTZ,
    configuracao_disparo JSONB, -- Alert configuration (frequency, recipients, etc.)
    referencia_id BIGINT, -- Reference to related record (e.g., CCT id)
    tipo_referencia TEXT, -- Type of referenced record
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_alertas_prazos_empresa_vencimento 
ON public."AlertasPrazos" (empresa_id, data_vencimento);

CREATE INDEX IF NOT EXISTS idx_alertas_prazos_status_tipo 
ON public."AlertasPrazos" (status_alerta, tipo_prazo);

COMMENT ON TABLE public."AlertasPrazos" IS 'Deadline alerts - automated monitoring of important dates';

-- PART 5: SUPPORT SYSTEM
-- Integrated help desk functionality

CREATE TABLE IF NOT EXISTS public."AtendimentosSuporte" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contabilidade_id BIGINT NOT NULL REFERENCES public."Contabilidades"(id) ON DELETE CASCADE,
    usuario_solicitante UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    numero_ticket TEXT NOT NULL UNIQUE, -- Formatted ticket number
    assunto TEXT NOT NULL,
    descricao TEXT NOT NULL,
    categoria TEXT NOT NULL, -- TECNICO, FUNCIONAL, DUVIDA, BUG, MELHORIA
    prioridade TEXT DEFAULT 'MEDIA' NOT NULL, -- BAIXA, MEDIA, ALTA, CRITICA
    status TEXT DEFAULT 'ABERTO' NOT NULL, -- ABERTO, EM_ANDAMENTO, AGUARDANDO_CLIENTE, RESOLVIDO, FECHADO
    atribuido_para UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    data_resolucao TIMESTAMPTZ,
    tempo_primeira_resposta INTEGER, -- Minutes until first response
    tempo_resolucao INTEGER, -- Minutes until resolution
    satisfacao_cliente INTEGER CHECK (satisfacao_cliente BETWEEN 1 AND 5),
    tags TEXT[], -- Array of tags for categorization
    dados_contexto JSONB, -- Additional context (browser, system info, etc.)
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS public."AtendimentosSuporteInteracoes" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    atendimento_id BIGINT NOT NULL REFERENCES public."AtendimentosSuporte"(id) ON DELETE CASCADE,
    usuario_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    tipo_interacao TEXT NOT NULL, -- COMENTARIO, STATUS_CHANGE, ASSIGNMENT, ATTACHMENT
    conteudo TEXT,
    arquivo_anexo TEXT, -- Path to attached file
    visivel_cliente BOOLEAN DEFAULT TRUE NOT NULL,
    dados_adiciais JSONB, -- Additional structured data
    criado_em TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_atendimentos_suporte_contabilidade_status 
ON public."AtendimentosSuporte" (contabilidade_id, status);

CREATE INDEX IF NOT EXISTS idx_atendimentos_suporte_atribuido_status 
ON public."AtendimentosSuporte" (atribuido_para, status);

CREATE INDEX IF NOT EXISTS idx_suporte_interacoes_atendimento_criado 
ON public."AtendimentosSuporteInteracoes" (atendimento_id, criado_em DESC);

-- Generate sequential ticket numbers
CREATE SEQUENCE IF NOT EXISTS seq_ticket_suporte START 1000;

COMMENT ON TABLE public."AtendimentosSuporte" IS 'Integrated support ticket system';
COMMENT ON TABLE public."AtendimentosSuporteInteracoes" IS 'All interactions/history for support tickets';

-- PART 6: ENABLE ROW LEVEL SECURITY
-- Ensure multi-tenant security for all new tables

ALTER TABLE public."LOGOPERACOES" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."DeclaracoesFiscais" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."PlanosContas" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."LancamentosContabeis" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."LancamentosContabeisItens" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."Notificacoes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."AlertasPrazos" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."AtendimentosSuporte" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."AtendimentosSuporteInteracoes" ENABLE ROW LEVEL SECURITY;

-- PART 7: CREATE RLS POLICIES
-- Multi-tenant security policies

-- LOGOPERACOES policies
CREATE POLICY "Users can view logs for their contabilidade" ON public."LOGOPERACOES"
FOR SELECT USING (
    contabilidade_id IN (
        SELECT contabilidade_id FROM public.profiles WHERE id = auth.uid()
    )
);

-- DeclaracoesFiscais policies  
CREATE POLICY "Users can manage declarations for their companies" ON public."DeclaracoesFiscais"
FOR ALL USING (
    empresa_id IN (
        SELECT e.id FROM public."Empresas" e
        JOIN public.profiles p ON p.contabilidade_id = e.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- PlanosContas policies
CREATE POLICY "Users can manage charts of accounts for their companies" ON public."PlanosContas"
FOR ALL USING (
    empresa_id IN (
        SELECT e.id FROM public."Empresas" e
        JOIN public.profiles p ON p.contabilidade_id = e.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- LancamentosContabeis policies
CREATE POLICY "Users can manage accounting entries for their companies" ON public."LancamentosContabeis"
FOR ALL USING (
    empresa_id IN (
        SELECT e.id FROM public."Empresas" e
        JOIN public.profiles p ON p.contabilidade_id = e.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- LancamentosContabeisItens policies
CREATE POLICY "Users can manage accounting entry items for their entries" ON public."LancamentosContabeisItens"
FOR ALL USING (
    lancamento_id IN (
        SELECT lc.id FROM public."LancamentosContabeis" lc
        JOIN public."Empresas" e ON e.id = lc.empresa_id
        JOIN public.profiles p ON p.contabilidade_id = e.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- Notificacoes policies
CREATE POLICY "Users can view their own notifications" ON public."Notificacoes"
FOR SELECT USING (usuario_id = auth.uid());

CREATE POLICY "System can create notifications for users" ON public."Notificacoes"
FOR INSERT WITH CHECK (true); -- Notifications can be created by the system

CREATE POLICY "Users can update their own notifications" ON public."Notificacoes"
FOR UPDATE USING (usuario_id = auth.uid());

-- AlertasPrazos policies
CREATE POLICY "Users can manage alerts for their companies" ON public."AlertasPrazos"
FOR ALL USING (
    empresa_id IN (
        SELECT e.id FROM public."Empresas" e
        JOIN public.profiles p ON p.contabilidade_id = e.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- AtendimentosSuporte policies
CREATE POLICY "Users can manage support tickets for their contabilidade" ON public."AtendimentosSuporte"
FOR ALL USING (
    contabilidade_id IN (
        SELECT contabilidade_id FROM public.profiles WHERE id = auth.uid()
    )
);

-- AtendimentosSuporteInteracoes policies
CREATE POLICY "Users can manage interactions for their support tickets" ON public."AtendimentosSuporteInteracoes"
FOR ALL USING (
    atendimento_id IN (
        SELECT a.id FROM public."AtendimentosSuporte" a
        JOIN public.profiles p ON p.contabilidade_id = a.contabilidade_id
        WHERE p.id = auth.uid()
    )
);

-- PART 8: TRIGGER FUNCTIONS FOR AUDIT TRAIL
-- Automatically log all operations

CREATE OR REPLACE FUNCTION log_operation()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert audit log for any operation
    INSERT INTO public."LOGOPERACOES" (
        user_id, 
        operacao, 
        tabela_afetada, 
        registro_id,
        detalhes_operacao,
        contabilidade_id
    ) VALUES (
        auth.uid(),
        TG_OP,
        TG_TABLE_NAME,
        COALESCE(NEW.id::TEXT, OLD.id::TEXT),
        CASE 
            WHEN TG_OP = 'DELETE' THEN to_jsonb(OLD)
            ELSE to_jsonb(NEW)
        END,
        CASE 
            WHEN TG_OP = 'DELETE' THEN 
                COALESCE(
                    OLD.contabilidade_id,
                    (SELECT contabilidade_id FROM public.profiles WHERE id = auth.uid())
                )
            ELSE 
                COALESCE(
                    NEW.contabilidade_id,
                    (SELECT contabilidade_id FROM public.profiles WHERE id = auth.uid())
                )
        END
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Add audit trail triggers to key tables
CREATE TRIGGER trigger_log_empresas
    AFTER INSERT OR UPDATE OR DELETE ON public."Empresas"
    FOR EACH ROW EXECUTE FUNCTION log_operation();

CREATE TRIGGER trigger_log_controles_mensais
    AFTER INSERT OR UPDATE OR DELETE ON public."ControlesMensais"
    FOR EACH ROW EXECUTE FUNCTION log_operation();

CREATE TRIGGER trigger_log_regras_validadas
    AFTER INSERT OR UPDATE OR DELETE ON public."RegrasValidadas"
    FOR EACH ROW EXECUTE FUNCTION log_operation();

CREATE TRIGGER trigger_log_declaracoes_fiscais
    AFTER INSERT OR UPDATE OR DELETE ON public."DeclaracoesFiscais"
    FOR EACH ROW EXECUTE FUNCTION log_operation();

-- PART 9: NOTIFICATION TRIGGER FUNCTION
-- Event-driven notification system using PostgreSQL NOTIFY

CREATE OR REPLACE FUNCTION send_notification_event()
RETURNS TRIGGER AS $$
BEGIN
    -- Send notification event for background processing
    PERFORM pg_notify(
        'auditoria360_events',
        json_build_object(
            'type', TG_TABLE_NAME || '_' || TG_OP,
            'data', CASE 
                WHEN TG_OP = 'DELETE' THEN to_jsonb(OLD)
                ELSE to_jsonb(NEW)
            END,
            'timestamp', NOW(),
            'user_id', auth.uid()
        )::text
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Add notification triggers to relevant tables
CREATE TRIGGER trigger_notify_controles_mensais
    AFTER INSERT OR UPDATE ON public."ControlesMensais"
    FOR EACH ROW EXECUTE FUNCTION send_notification_event();

CREATE TRIGGER trigger_notify_declaracoes_fiscais
    AFTER INSERT OR UPDATE ON public."DeclaracoesFiscais"
    FOR EACH ROW EXECUTE FUNCTION send_notification_event();