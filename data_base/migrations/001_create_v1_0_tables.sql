-- AUDITORIA360 v1.0 - Database Schema Creation
-- Implementation of "Base de Conhecimento Inteligente" and "Motor de Auditoria da Folha"
-- Based on the problem statement requirements

-- =============================================================================
-- 4.1. Código da Base de Dados (O Alicerce do Conhecimento)
-- =============================================================================

-- Tabela para os Sindicatos, alimentada pelo seu "CONTROLE SINDICATO EMPRESAS"
CREATE TABLE IF NOT EXISTS public."Sindicatos" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_sindicato TEXT NOT NULL,
    cnpj TEXT UNIQUE NOT NULL, -- Essencial para buscas no Mediador
    base_territorial TEXT,
    categoria_representada TEXT, -- Ex: "Trabalhadores no Comércio"
    criado_em TIMESTAMPTZ DEFAULT NOW()
);

-- Index for better performance on CNPJ searches (used by the monitoring robot)
CREATE INDEX IF NOT EXISTS idx_sindicatos_cnpj ON public."Sindicatos"(cnpj);

-- Tabela para as CCTs, o nosso repositório de regras
CREATE TABLE IF NOT EXISTS public."ConvencoesColetivas" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sindicato_id BIGINT NOT NULL REFERENCES public."Sindicatos"(id),
    numero_registro_mte TEXT UNIQUE,
    vigencia_inicio DATE NOT NULL,
    vigencia_fim DATE NOT NULL,
    link_documento_oficial TEXT, -- Link para o PDF no site do governo
    dados_cct JSONB, -- O JSON estruturado com as regras extraídas pela IA
    criado_em TIMESTAMPTZ DEFAULT NOW(),
    atualizado_em TIMESTAMPTZ DEFAULT NOW()
);

-- Comment explaining the JSON structure
COMMENT ON COLUMN public."ConvencoesColetivas".dados_cct
IS 'JSON estruturado contendo {piso_salarial: 1985.00, beneficios: [{nome: "VR", valor: 25.00}], ...}';

-- Index for CCT validity queries (used by the audit engine)
CREATE INDEX IF NOT EXISTS idx_ccts_vigencia ON public."ConvencoesColetivas"(vigencia_inicio, vigencia_fim);
CREATE INDEX IF NOT EXISTS idx_ccts_sindicato ON public."ConvencoesColetivas"(sindicato_id);

-- =============================================================================
-- 2.1. Código da Base de Dados (O Arquivo de Provas)
-- =============================================================================

-- Verify that Empresas table exists (referenced by ProcessamentosFolha)
CREATE TABLE IF NOT EXISTS public."Empresas" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome TEXT NOT NULL,
    cnpj TEXT UNIQUE,
    contabilidade_id BIGINT, -- Reference to accounting firm
    sindicato_id BIGINT REFERENCES public."Sindicatos"(id), -- Reference to syndicate for CCT rules
    criado_em TIMESTAMPTZ DEFAULT NOW()
);

-- Main table for storing payroll audit results
CREATE TABLE IF NOT EXISTS public."ProcessamentosFolha" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa_id BIGINT NOT NULL REFERENCES public."Empresas"(id),
    periodo_mes INT NOT NULL,
    periodo_ano INT NOT NULL,
    arquivo_pdf TEXT NOT NULL, -- Name/path of the uploaded PDF
    dados_extraidos TEXT, -- JSON with AI-extracted payroll data
    relatorio_divergencias TEXT, -- JSON with audit findings and divergences
    total_funcionarios INT DEFAULT 0,
    total_divergencias INT DEFAULT 0,
    status_processamento TEXT NOT NULL DEFAULT 'PROCESSANDO', -- 'PROCESSANDO', 'CONCLUÍDO', 'CONCLUÍDO com Divergências', 'ERRO'
    criado_em TIMESTAMPTZ DEFAULT NOW(),
    concluido_em TIMESTAMPTZ,
    UNIQUE(empresa_id, periodo_mes, periodo_ano)
);

-- Comment explaining the JSON structures
COMMENT ON COLUMN public."ProcessamentosFolha".dados_extraidos
IS 'JSON com dados extraídos da folha: {funcionarios: [{nome, cargo, salario_base, horas_extras, descontos}]}';

COMMENT ON COLUMN public."ProcessamentosFolha".relatorio_divergencias  
IS 'JSON com {sumario: {...}, divergencias: [{tipo: "CRITICO", descricao: "Salário abaixo do piso", ...}]}';

-- Index for efficient queries by company and period
CREATE INDEX IF NOT EXISTS idx_processamentos_empresa_periodo ON public."ProcessamentosFolha"(empresa_id, periodo_ano, periodo_mes);
CREATE INDEX IF NOT EXISTS idx_processamentos_status ON public."ProcessamentosFolha"(status_processamento);

-- =============================================================================
-- Additional Supporting Tables
-- =============================================================================

-- Table for legislation documents (supporting the knowledge base)
CREATE TABLE IF NOT EXISTS public."DocumentosLegislacao" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo TEXT NOT NULL,
    tipo_documento TEXT NOT NULL, -- 'LEI', 'DECRETO', 'CCT', 'PORTARIA'
    numero_documento TEXT,
    data_publicacao DATE,
    orgao_emissor TEXT,
    arquivo_pdf TEXT, -- Path to uploaded PDF
    dados_extraidos JSONB, -- AI-extracted structured data
    status_processamento TEXT DEFAULT 'pendente', -- 'pendente', 'processando', 'concluido', 'erro'
    criado_em TIMESTAMPTZ DEFAULT NOW(),
    processado_em TIMESTAMPTZ
);

-- Table for notification system (monitoring robot alerts)
CREATE TABLE IF NOT EXISTS public."NotificacoesValidacao" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sindicato_id BIGINT REFERENCES public."Sindicatos"(id),
    tipo_notificacao TEXT NOT NULL, -- 'NOVA_CCT', 'CCT_EXPIRANDO', 'DOCUMENTO_NOVO'
    titulo TEXT NOT NULL,
    descricao TEXT,
    link_documento TEXT,
    status_notificacao TEXT DEFAULT 'PENDENTE', -- 'PENDENTE', 'PROCESSADA', 'IGNORADA'
    criado_em TIMESTAMPTZ DEFAULT NOW(),
    processado_em TIMESTAMPTZ
);

-- =============================================================================
-- Sample Data for Testing and Demonstration
-- =============================================================================

-- Insert sample syndicate data
INSERT INTO public."Sindicatos" (nome_sindicato, cnpj, base_territorial, categoria_representada) 
VALUES 
    ('Sindicato dos Comerciários de São Paulo', '12.345.678/0001-90', 'São Paulo - SP', 'Trabalhadores no Comércio'),
    ('Sindicato dos Metalúrgicos do ABC', '98.765.432/0001-10', 'Santo André - SP', 'Trabalhadores Metalúrgicos'),
    ('Sindicato dos Bancários de São Paulo', '11.222.333/0001-44', 'São Paulo - SP', 'Trabalhadores Bancários')
ON CONFLICT (cnpj) DO NOTHING;

-- Insert sample CCT data
INSERT INTO public."ConvencoesColetivas" (sindicato_id, numero_registro_mte, vigencia_inicio, vigencia_fim, dados_cct)
SELECT 
    s.id,
    'CCT-2024-001-' || s.id,
    '2024-01-01'::date,
    '2024-12-31'::date,
    jsonb_build_object(
        'piso_salarial', 1985.00,
        'beneficios', jsonb_build_array(
            jsonb_build_object('nome', 'Vale Refeição', 'valor', 25.00),
            jsonb_build_object('nome', 'Vale Transporte', 'percentual', 6.0),
            jsonb_build_object('nome', 'Auxílio Creche', 'valor', 150.00)
        ),
        'horas_extras', jsonb_build_object(
            '50%', 'Duas primeiras horas extras',
            '100%', 'A partir da terceira hora extra'
        ),
        'adicional_noturno', '25% sobre a hora normal',
        'categorias_abrangidas', jsonb_build_array('Vendedores', 'Caixas', 'Supervisores')
    )
FROM public."Sindicatos" s
WHERE NOT EXISTS (
    SELECT 1 FROM public."ConvencoesColetivas" cct 
    WHERE cct.sindicato_id = s.id
);

-- Insert sample company data
INSERT INTO public."Empresas" (nome, cnpj, contabilidade_id, sindicato_id)
SELECT 
    'Empresa Modelo ' || s.nome_sindicato,
    '12.345.678/000' || s.id || '-01',
    1, -- Assuming contabilidade_id = 1 exists
    s.id
FROM public."Sindicatos" s
ON CONFLICT (cnpj) DO NOTHING;

-- =============================================================================
-- Views for Better Data Access
-- =============================================================================

-- View to get CCTs with syndicate information
CREATE OR REPLACE VIEW vw_ccts_completas AS
SELECT 
    cct.id,
    cct.numero_registro_mte,
    cct.vigencia_inicio,
    cct.vigencia_fim,
    cct.dados_cct,
    s.nome_sindicato,
    s.cnpj as sindicato_cnpj,
    s.base_territorial,
    CASE 
        WHEN cct.vigencia_fim < CURRENT_DATE THEN 'EXPIRADO'
        WHEN cct.vigencia_inicio <= CURRENT_DATE AND cct.vigencia_fim >= CURRENT_DATE THEN 'ATIVO'
        WHEN cct.vigencia_inicio > CURRENT_DATE THEN 'FUTURO'
    END as status_vigencia,
    CASE 
        WHEN cct.vigencia_fim BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days' THEN true
        ELSE false
    END as expirando_30_dias
FROM public."ConvencoesColetivas" cct
JOIN public."Sindicatos" s ON cct.sindicato_id = s.id;

-- View for payroll processing summary
CREATE OR REPLACE VIEW vw_processamentos_sumario AS
SELECT 
    pf.id,
    pf.empresa_id,
    e.nome as empresa_nome,
    pf.periodo_mes,
    pf.periodo_ano,
    pf.total_funcionarios,
    pf.total_divergencias,
    pf.status_processamento,
    pf.criado_em,
    pf.concluido_em,
    s.nome_sindicato,
    EXTRACT(EPOCH FROM (pf.concluido_em - pf.criado_em))/60 as tempo_processamento_minutos
FROM public."ProcessamentosFolha" pf
JOIN public."Empresas" e ON pf.empresa_id = e.id
LEFT JOIN public."Sindicatos" s ON e.sindicato_id = s.id;

-- =============================================================================
-- Functions for Business Logic
-- =============================================================================

-- Function to get applicable CCT rules for a company
CREATE OR REPLACE FUNCTION get_regras_cct_para_empresa(
    p_empresa_id BIGINT,
    p_data_referencia DATE DEFAULT CURRENT_DATE
)
RETURNS JSONB AS $$
DECLARE
    regras JSONB;
BEGIN
    SELECT cct.dados_cct
    INTO regras
    FROM public."ConvencoesColetivas" cct
    JOIN public."Empresas" e ON e.sindicato_id = cct.sindicato_id
    WHERE e.id = p_empresa_id
    AND p_data_referencia BETWEEN cct.vigencia_inicio AND cct.vigencia_fim
    ORDER BY cct.vigencia_inicio DESC
    LIMIT 1;
    
    RETURN COALESCE(regras, '{}'::jsonb);
END;
$$ LANGUAGE plpgsql;

-- Function to create monitoring notifications
CREATE OR REPLACE FUNCTION criar_notificacao_validacao(
    p_sindicato_id BIGINT,
    p_link_pdf TEXT,
    p_tipo TEXT DEFAULT 'NOVA_CCT'
)
RETURNS BIGINT AS $$
DECLARE
    notification_id BIGINT;
    sindicato_nome TEXT;
BEGIN
    -- Get syndicate name
    SELECT nome_sindicato INTO sindicato_nome
    FROM public."Sindicatos"
    WHERE id = p_sindicato_id;
    
    -- Insert notification
    INSERT INTO public."NotificacoesValidacao" (
        sindicato_id,
        tipo_notificacao,
        titulo,
        descricao,
        link_documento
    ) VALUES (
        p_sindicato_id,
        p_tipo,
        'Nova CCT encontrada: ' || sindicato_nome,
        'O sistema de monitoramento encontrou uma nova CCT para validação.',
        p_link_pdf
    ) RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$ LANGUAGE plpgsql;

-- =============================================================================
-- Triggers for Data Integrity and Automation
-- =============================================================================

-- Update atualizado_em on CCT changes
CREATE OR REPLACE FUNCTION update_cct_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.atualizado_em = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_cct_updated_at
    BEFORE UPDATE ON public."ConvencoesColetivas"
    FOR EACH ROW
    EXECUTE FUNCTION update_cct_timestamp();

-- =============================================================================
-- Security and Permissions
-- =============================================================================

-- Grant appropriate permissions (adjust based on your security model)
-- These are examples - adjust based on your actual user roles

-- GRANT SELECT, INSERT, UPDATE ON public."Sindicatos" TO auditoria_app;
-- GRANT SELECT, INSERT, UPDATE ON public."ConvencoesColetivas" TO auditoria_app;  
-- GRANT SELECT, INSERT, UPDATE ON public."ProcessamentosFolha" TO auditoria_app;
-- GRANT SELECT, INSERT, UPDATE ON public."Empresas" TO auditoria_app;
-- GRANT SELECT, INSERT, UPDATE ON public."DocumentosLegislacao" TO auditoria_app;
-- GRANT SELECT, INSERT, UPDATE ON public."NotificacoesValidacao" TO auditoria_app;

-- =============================================================================
-- Maintenance and Monitoring Queries
-- =============================================================================

-- Query to check CCTs expiring in the next 30 days (for monitoring alerts)
-- SELECT * FROM vw_ccts_completas WHERE expirando_30_dias = true;

-- Query to get processing statistics by month
-- SELECT 
--     periodo_ano,
--     periodo_mes,
--     COUNT(*) as total_processamentos,
--     SUM(total_divergencias) as total_divergencias,
--     AVG(total_funcionarios) as media_funcionarios
-- FROM public."ProcessamentosFolha"
-- WHERE status_processamento = 'CONCLUÍDO'
-- GROUP BY periodo_ano, periodo_mes
-- ORDER BY periodo_ano DESC, periodo_mes DESC;

-- Schema validation queries
-- SELECT 
--     table_name,
--     column_name,
--     data_type,
--     is_nullable
-- FROM information_schema.columns
-- WHERE table_schema = 'public'
--     AND table_name IN ('Sindicatos', 'ConvencoesColetivas', 'ProcessamentosFolha')
-- ORDER BY table_name, ordinal_position;

-- =============================================================================
-- END OF SCHEMA CREATION
-- =============================================================================