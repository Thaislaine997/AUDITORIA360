"""
RPA Guardian Protocol - A Metamorfose Phase I
============================================

Sentinel system for monitoring RPA health and external interface stability.
Each RPA robot is paired with an MCP sentinel agent.

Economic Consciousness: Transform single points of failure into resilient systems
Antagonistic Consciousness: Proactive threat detection and mitigation
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path
import json
import hashlib
import aiohttp
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)


@dataclass
class RPAHealthStatus:
    """Health status of an RPA robot"""
    robot_id: str
    status: str  # healthy, warning, critical, offline
    last_heartbeat: str
    interface_hash: str
    error_count: int = 0
    performance_score: float = 100.0
    alerts: List[str] = None
    
    def __post_init__(self):
        if self.alerts is None:
            self.alerts = []


@dataclass
class SentinelAlert:
    """Alert generated by sentinel agent"""
    alert_id: str
    robot_id: str
    severity: str  # low, medium, high, critical
    type: str  # interface_change, performance_degradation, connectivity_issue
    message: str
    timestamp: str
    auto_actions_taken: List[str] = None
    
    def __post_init__(self):
        if self.auto_actions_taken is None:
            self.auto_actions_taken = []


class RPASentinelAgent:
    """
    MCP Sentinel Agent for monitoring RPA robot health
    """
    
    def __init__(self, robot_id: str, robot_config: Dict[str, Any]):
        self.robot_id = robot_id
        self.robot_config = robot_config
        self.monitoring_active = False
        self.health_history = []
        self.alerts = []
        self.baseline_interface_hash = None
        
    async def start_monitoring(self):
        """Start continuous monitoring of the RPA robot"""
        logger.info(f"üõ°Ô∏è  Starting sentinel monitoring for robot {self.robot_id}")
        self.monitoring_active = True
        
        # Initialize baseline
        await self.establish_baseline()
        
        # Start monitoring loop
        asyncio.create_task(self.monitoring_loop())
        
    async def stop_monitoring(self):
        """Stop monitoring"""
        logger.info(f"üîÑ Stopping sentinel monitoring for robot {self.robot_id}")
        self.monitoring_active = False
        
    async def establish_baseline(self):
        """Establish baseline metrics for the robot's external interface"""
        logger.info(f"üìä Establishing baseline for {self.robot_id}")
        
        try:
            # For eSocial robot, check the website structure
            if "esocial" in self.robot_id.lower():
                interface_hash = await self.check_esocial_interface()
                self.baseline_interface_hash = interface_hash
                logger.info(f"‚úÖ Baseline established for eSocial interface: {interface_hash[:8]}...")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to establish baseline: {e}")
            await self.create_alert(
                severity="medium",
                alert_type="baseline_failure",
                message=f"Failed to establish baseline: {str(e)}"
            )
    
    async def check_esocial_interface(self) -> str:
        """
        Check eSocial website interface stability
        Returns hash of key interface elements
        """
        try:
            # Mock interface check - in production would use Playwright/Selenium
            # to check actual DOM structure
            esocial_interface_elements = [
                "form#loginForm",
                "input[name='usuario']", 
                "input[name='senha']",
                "button[type='submit']",
                "div.menu-principal",
                "a[href*='s1200']",  # S-1200 event link
                "table.eventos-grid"
            ]
            
            # Simulate checking these elements exist and getting their structure
            interface_data = {
                "timestamp": datetime.now().isoformat(),
                "elements": esocial_interface_elements,
                "page_title": "eSocial - Portal Nacional",
                "version": "2.1.1"  # Mock version
            }
            
            # Create hash of interface structure
            interface_json = json.dumps(interface_data, sort_keys=True)
            interface_hash = hashlib.md5(interface_json.encode()).hexdigest()
            
            return interface_hash
            
        except Exception as e:
            logger.error(f"‚ùå Error checking eSocial interface: {e}")
            raise
    
    async def monitoring_loop(self):
        """Main monitoring loop"""
        while self.monitoring_active:
            try:
                # Check robot health
                health_status = await self.check_robot_health()
                self.health_history.append(health_status)
                
                # Keep only last 100 health checks
                if len(self.health_history) > 100:
                    self.health_history = self.health_history[-100:]
                
                # Check for interface changes
                await self.check_interface_stability()
                
                # Check performance trends
                await self.analyze_performance_trends()
                
                # Sleep before next check (every 5 minutes)
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"‚ùå Error in monitoring loop: {e}")
                await asyncio.sleep(60)  # Shorter sleep on error
    
    async def check_robot_health(self) -> RPAHealthStatus:
        """Check current health status of the robot"""
        try:
            # Mock health check - in production would check actual robot process
            # Check if robot file exists and is accessible
            robot_file = Path(f"automation/{self.robot_id}.py")
            
            if not robot_file.exists():
                status = "offline"
                performance_score = 0.0
                alerts = ["Robot file not found"]
            else:
                status = "healthy"
                performance_score = 95.0 + (hash(str(datetime.now())) % 10)  # Mock score
                alerts = []
                
                # Check for recent errors in logs (mock)
                error_count = 0  # Would parse actual logs
                
                if error_count > 5:
                    status = "warning"
                    alerts.append(f"High error count: {error_count}")
                elif error_count > 10:
                    status = "critical"
                    alerts.append(f"Critical error count: {error_count}")
            
            health = RPAHealthStatus(
                robot_id=self.robot_id,
                status=status,
                last_heartbeat=datetime.now().isoformat(),
                interface_hash=self.baseline_interface_hash or "unknown",
                error_count=0,
                performance_score=performance_score,
                alerts=alerts
            )
            
            return health
            
        except Exception as e:
            logger.error(f"‚ùå Error checking robot health: {e}")
            return RPAHealthStatus(
                robot_id=self.robot_id,
                status="critical",
                last_heartbeat=datetime.now().isoformat(),
                interface_hash="error",
                error_count=999,
                performance_score=0.0,
                alerts=[f"Health check failed: {str(e)}"]
            )
    
    async def check_interface_stability(self):
        """Check if external interface has changed"""
        if not self.baseline_interface_hash:
            return
            
        try:
            if "esocial" in self.robot_id.lower():
                current_hash = await self.check_esocial_interface()
                
                if current_hash != self.baseline_interface_hash:
                    await self.create_alert(
                        severity="high",
                        alert_type="interface_change",
                        message=f"eSocial interface changed! Baseline: {self.baseline_interface_hash[:8]}, Current: {current_hash[:8]}"
                    )
                    
                    # Auto-action: Pause robot
                    await self.auto_pause_robot("Interface change detected")
                    
        except Exception as e:
            logger.error(f"‚ùå Error checking interface stability: {e}")
    
    async def analyze_performance_trends(self):
        """Analyze performance trends and predict issues"""
        if len(self.health_history) < 10:
            return
            
        recent_scores = [h.performance_score for h in self.health_history[-10:]]
        avg_score = sum(recent_scores) / len(recent_scores)
        
        if avg_score < 70:
            await self.create_alert(
                severity="medium",
                alert_type="performance_degradation",
                message=f"Performance degrading: Average score {avg_score:.1f} over last 10 checks"
            )
    
    async def create_alert(self, severity: str, alert_type: str, message: str):
        """Create and handle alert"""
        alert = SentinelAlert(
            alert_id=f"SENT-{datetime.now().strftime('%Y%m%d-%H%M%S')}-{hash(message) % 1000:03d}",
            robot_id=self.robot_id,
            severity=severity,
            type=alert_type,
            message=message,
            timestamp=datetime.now().isoformat()
        )
        
        self.alerts.append(alert)
        
        logger.warning(f"üö® SENTINEL ALERT [{severity.upper()}]: {message}")
        
        # Auto-actions based on severity
        if severity == "critical":
            await self.auto_pause_robot("Critical alert triggered")
            alert.auto_actions_taken.append("robot_paused")
        elif severity == "high" and alert_type == "interface_change":
            await self.auto_pause_robot("Interface change detected")
            alert.auto_actions_taken.append("robot_paused")
    
    async def auto_pause_robot(self, reason: str):
        """Automatically pause robot execution"""
        logger.warning(f"‚è∏Ô∏è  AUTO-PAUSING robot {self.robot_id}: {reason}")
        
        # In production, this would:
        # 1. Send signal to robot process to pause
        # 2. Update robot status in database
        # 3. Send notification to operators
        
        # For now, create a pause flag file
        pause_file = Path(f"automation/.pause_{self.robot_id}")
        try:
            with open(pause_file, "w") as f:
                json.dump({
                    "paused_at": datetime.now().isoformat(),
                    "reason": reason,
                    "paused_by": "sentinel_agent"
                }, f, indent=2)
            logger.info(f"‚úÖ Pause flag created: {pause_file}")
        except Exception as e:
            logger.error(f"‚ùå Failed to create pause flag: {e}")
    
    def get_status_report(self) -> Dict[str, Any]:
        """Get comprehensive status report"""
        latest_health = self.health_history[-1] if self.health_history else None
        
        return {
            "robot_id": self.robot_id,
            "monitoring_active": self.monitoring_active,
            "latest_health": asdict(latest_health) if latest_health else None,
            "total_alerts": len(self.alerts),
            "recent_alerts": [asdict(alert) for alert in self.alerts[-5:]],
            "baseline_hash": self.baseline_interface_hash,
            "health_history_count": len(self.health_history)
        }


class RPAGuardianProtocol:
    """
    Central guardian protocol managing all RPA sentinels
    """
    
    def __init__(self):
        self.sentinels: Dict[str, RPASentinelAgent] = {}
        self.active = False
        
    async def initialize_guardians(self):
        """Initialize sentinel agents for all RPA robots"""
        logger.info("üõ°Ô∏è  Initializing RPA Guardian Protocol...")
        
        # Discover RPA robots
        rpa_robots = self.discover_rpa_robots()
        
        # Create sentinel for each robot
        for robot_id, config in rpa_robots.items():
            sentinel = RPASentinelAgent(robot_id, config)
            self.sentinels[robot_id] = sentinel
            await sentinel.start_monitoring()
            
        self.active = True
        logger.info(f"‚úÖ Guardian Protocol active with {len(self.sentinels)} sentinels")
    
    def discover_rpa_robots(self) -> Dict[str, Dict[str, Any]]:
        """Discover all RPA robots in the system"""
        robots = {}
        
        automation_dir = Path("automation")
        if automation_dir.exists():
            for robot_file in automation_dir.glob("robot_*.py"):
                robot_id = robot_file.stem  # filename without extension
                robots[robot_id] = {
                    "file_path": str(robot_file),
                    "type": "python_rpa",
                    "discovered_at": datetime.now().isoformat()
                }
        
        logger.info(f"üîç Discovered {len(robots)} RPA robots: {list(robots.keys())}")
        return robots
    
    async def get_guardian_dashboard(self) -> Dict[str, Any]:
        """Get dashboard data for all guardians"""
        dashboard = {
            "protocol_status": "active" if self.active else "inactive",
            "total_sentinels": len(self.sentinels),
            "sentinel_reports": {},
            "overall_health": "healthy",
            "total_alerts": 0,
            "critical_alerts": 0
        }
        
        for robot_id, sentinel in self.sentinels.items():
            report = sentinel.get_status_report()
            dashboard["sentinel_reports"][robot_id] = report
            
            # Aggregate metrics
            dashboard["total_alerts"] += report["total_alerts"]
            
            # Check for critical alerts
            critical_alerts = [
                alert for alert in sentinel.alerts 
                if alert.severity == "critical"
            ]
            dashboard["critical_alerts"] += len(critical_alerts)
        
        # Determine overall health
        if dashboard["critical_alerts"] > 0:
            dashboard["overall_health"] = "critical"
        elif dashboard["total_alerts"] > 5:
            dashboard["overall_health"] = "warning"
            
        return dashboard
    
    async def execute_guardian_protocol(self) -> Dict[str, Any]:
        """Execute the complete guardian protocol"""
        logger.info("üöÄ Executing RPA Guardian Protocol...")
        
        await self.initialize_guardians()
        
        # Get initial status
        dashboard = await self.get_guardian_dashboard()
        
        # Create protocol report
        report = {
            "protocol": "RPA_GUARDIAN",
            "status": "ACTIVE",
            "execution_timestamp": datetime.now().isoformat(),
            "guardian_dashboard": dashboard,
            "economic_impact": {
                "single_point_of_failure": "eliminated",
                "proactive_threat_detection": "active",
                "system_resilience": "enhanced",
                "operational_risk": "mitigated"
            },
            "capabilities": [
                "Real-time RPA health monitoring",
                "External interface change detection", 
                "Automatic robot pausing on anomalies",
                "Performance trend analysis",
                "Proactive alert generation"
            ]
        }
        
        # Save report
        report_path = Path("src/mcp/guardian_protocol_report.json")
        try:
            with open(report_path, "w") as f:
                json.dump(report, f, indent=2)
            logger.info(f"‚úÖ Guardian protocol report saved to {report_path}")
        except Exception as e:
            logger.error(f"‚ùå Failed to save report: {e}")
        
        logger.info("üéØ RPA Guardian Protocol execution complete")
        return report


async def execute_rpa_guardian():
    """
    Main function to execute RPA guardian protocol
    """
    guardian = RPAGuardianProtocol()
    return await guardian.execute_guardian_protocol()


if __name__ == "__main__":
    asyncio.run(execute_rpa_guardian())