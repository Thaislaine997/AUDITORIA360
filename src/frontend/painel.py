import streamlit as st
import sys # Add sys
import os # Add os

# --- Path Setup ---
# Add the project root to sys.path to allow imports like 'from src.core...'
# Assumes painel.py is in src/frontend/
_project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if _project_root not in sys.path:
    sys.path.insert(0, _project_root)
# --- End Path Setup ---

import yaml
from yaml.loader import SafeLoader
from streamlit_authenticator import Authenticate
import requests # Adicionado import de requests
from src.core.log_utils import logger # Corrigido o caminho do import
from src.core.config import settings # Corrigido o caminho do import
# from core.database import * # Comentado ou removido se n√£o usado diretamente aqui

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Auditoria360 - Login",
    page_icon="üîê",
    layout="centered"
)

# --- Fun√ß√£o para carregar as credenciais ---
def load_user_config():
    try:
        with open(os.path.join('auth', 'login.yaml'), encoding='utf-8') as file:
            return yaml.load(file, Loader=SafeLoader)
    except FileNotFoundError:
        st.error("Arquivo de configura√ß√£o 'auth/login.yaml' n√£o encontrado.")
        st.info("Certifique-se de que o arquivo est√° no diret√≥rio 'auth' na raiz do projeto.")
        return None

config = load_user_config()

# --- Fun√ß√£o para autenticar na API e obter o token JWT ---
def autenticar_api(username, password):
    # API_BASE_URL = os.environ.get("API_BASE_URL") or "http://localhost:8000" # Removido
    try:
        response = requests.post(
            f"{settings.API_BASE_URL}/auth/token",  # Corrigido endpoint e usando settings.API_BASE_URL
            data={"username": username, "password": password}, # FastAPI espera dados de formul√°rio para OAuth2PasswordRequestForm
            timeout=10
        )
        response.raise_for_status()
        return response.json().get("access_token") # Usar .get() para seguran√ßa
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"Erro HTTP ao autenticar na API: {http_err}")
        logger.error(f"Detalhes da resposta: {response.text}")
        st.error(f"Erro ao autenticar com o servidor: {response.status_code}")
        return None
    except Exception as e:
        logger.error(f"Erro ao autenticar na API: {e}")
        st.error(f"Ocorreu um erro inesperado durante a autentica√ß√£o na API.")
        return None

if config and 'credentials' in config and 'cookie' in config: # Removido 'preauthorized' da verifica√ß√£o
    authenticator = Authenticate(
        config['credentials'],
        config['cookie']['name'],
        config['cookie']['key'],
        config['cookie']['expiry_days']
        # config['preauthorized'] # Removido par√¢metro obsoleto
    )
else:
    st.error("Erro cr√≠tico: Arquivo de configura√ß√£o de autentica√ß√£o (login.yaml) est√° incompleto ou corrompido. Verifique as chaves 'credentials' e 'cookie'.") # Mensagem de erro atualizada
    logger.error("Erro cr√≠tico: Arquivo de configura√ß√£o de autentica√ß√£o (login.yaml) est√° incompleto ou corrompido.")
    st.stop()

# --- P√°gina de Login ---
# Renderiza o formul√°rio de login ou o estado de autenticado/erro
# A fun√ß√£o login() precisa ser chamada em cada script/p√°gina onde a autentica√ß√£o √© necess√°ria
# se voc√™ n√£o estiver usando um gerenciamento de estado de sess√£o mais centralizado que persista entre "p√°ginas"
# de forma que o authenticator saiba o estado.
# No modelo multipage do Streamlit, o st.session_state √© compartilhado.

# Exibe o t√≠tulo e o logo ANTES de chamar authenticator.login()
# para que apare√ßam mesmo se o usu√°rio ainda n√£o estiver logado.
st.title("Bem-vindo ao Auditoria360")

logo_path = os.path.join('assets', 'logo.png')
if os.path.exists(logo_path):
    st.image(logo_path, width=180)

# A chamada login() ir√° exibir o formul√°rio ou, se j√° logado e o cookie for v√°lido,
# ir√° pular o formul√°rio e definir st.session_state.authentication_status = True.
authenticator.login('main', fields={'Form name': 'Login Auditoria360'})


if st.session_state.get("authentication_status"):
    # Usu√°rio autenticado com sucesso pelo streamlit-authenticator
    
    # Etapa 1: Obter/Confirmar token da API
    if "token" not in st.session_state or st.session_state["token"] is None:
        st.subheader("Confirma√ß√£o de Seguran√ßa Adicional")
        current_username = st.session_state.get("username")
        
        if not current_username:
            st.error("Nome de usu√°rio n√£o encontrado na sess√£o. Por favor, fa√ßa logout e login novamente.")
            authenticator.logout("Logout", "main", key="logout_error_username") # Fornece uma op√ß√£o de logout
            st.stop()
            
        api_password = st.text_input(
            f"Ol√° {st.session_state.get('name', 'usu√°rio')}, por favor, insira sua senha novamente para finalizar o login seguro:", 
            type="password", 
            key="api_password_input_main_panel"
        )
        
        if st.button("Confirmar Senha e Acessar API", key="confirm_api_password_main_panel"):
            if api_password: # current_username j√° verificado
                token = autenticar_api(current_username, api_password)
                if token:
                    st.session_state["token"] = token
                    # N√£o precisa de st.success aqui, o rerun vai mostrar a interface logada.
                    st.rerun() 
                else:
                    st.error("Falha ao obter o token da API. Verifique sua senha ou tente novamente.")
                    # N√£o parar aqui, permite nova tentativa de senha.
            else:
                st.warning("Senha √© necess√°ria para autentica√ß√£o na API.")
        else:
            st.info("√â necess√°rio confirmar sua senha para acessar os recursos da aplica√ß√£o.")
            st.stop() # Aguarda a entrada da senha e o clique no bot√£o.
    
    # Etapa 2: Token da API obtido, configurar sess√£o e interface de usu√°rio logado
    # Esta parte s√≥ executa se st.session_state.token existir (ap√≥s o rerun da etapa anterior)
    if "token" in st.session_state and st.session_state["token"] is not None:
        # Obter id_cliente (client_id)
        if 'client_id' not in st.session_state or st.session_state.get('client_id') is None: # Alterado para client_id
            current_username = st.session_state.get("username") # J√° deve estar definido
            if current_username and config:
                user_credentials = config.get('credentials', {}).get('usernames', {}).get(current_username, {})
                client_id = user_credentials.get('client_id')
                if client_id:
                    st.session_state['client_id'] = client_id # Alterado para client_id
                    # Manter id_cliente para compatibilidade com c√≥digo legado temporariamente
                    st.session_state['id_cliente'] = client_id
                    logger.info(f"ID do Cliente '{client_id}' armazenado na sess√£o para o usu√°rio '{current_username}'.")
                else:
                    logger.warning(f"ID do Cliente (client_id) n√£o encontrado na configura√ß√£o para o usu√°rio '{current_username}'.")
                    st.session_state['client_id'] = "N/A" # Alterado para client_id 
                    st.session_state['id_cliente'] = "N/A" # Manter id_cliente para compatibilidade
                    st.warning(f"Aten√ß√£o: ID do Cliente (client_id) n√£o configurado para o usu√°rio '{current_username}' no arquivo auth/login.yaml. Algumas funcionalidades podem ser limitadas.")
            elif not config: # Deve ser pego antes, mas como fallback
                st.error("Configura√ß√£o de autentica√ß√£o (login.yaml) n√£o carregada. N√£o √© poss√≠vel obter client_id.")
                st.session_state['client_id'] = "ERRO_CONFIG" # Alterado para client_id
                st.session_state['id_cliente'] = "ERRO_CONFIG" # Manter id_cliente para compatibilidade

        # Configurar informa√ß√µes do usu√°rio para utiliza√ß√£o em utils.py display_user_info_sidebar
        if 'user_info' not in st.session_state: 
            st.session_state.user_info = {
                "name": st.session_state.get('name', 'Usu√°rio'),
                "username": st.session_state.get('username', ''),
                # Outros campos podem ser adicionados conforme necess√°rio
            }

        # Configurar a interface de usu√°rio logado (sidebar e corpo da p√°gina)
        authenticator.logout('Logout', 'sidebar', key='logout_sidebar_button') 
        st.sidebar.title(f"Bem-vindo(a)")
        st.sidebar.markdown(f"**{st.session_state.get('name')}**") # Nome em negrito
        
        if st.session_state.get('client_id') and st.session_state.get('client_id') not in ["N/A", "ERRO_CONFIG"]: # Alterado para client_id
            st.sidebar.caption(f"Cliente ID: {st.session_state['client_id']}") # Alterado para client_id
        elif st.session_state.get('client_id') == "N/A": # Alterado para client_id
             st.sidebar.warning("Cliente ID n√£o definido.")
        else:
            st.sidebar.error("Erro ao obter Cliente ID.")
        
        st.sidebar.markdown("---") # Linha divis√≥ria na sidebar
        st.header("Login realizado com sucesso! ‚úÖ")
        st.info("Selecione uma p√°gina no menu √† esquerda para come√ßar a utilizar o sistema.")
        st.balloons() # Celebra√ß√£o!

elif st.session_state.get("authentication_status") is False:
    st.error('Usu√°rio ou senha incorreto. Por favor, tente novamente.')
    # Nenhuma informa√ß√£o de usu√°rio ou logout na sidebar deve aparecer aqui.

elif st.session_state.get("authentication_status") is None:
    st.subheader("Por favor, fa√ßa o login para continuar.")
    # O formul√°rio de login √© renderizado por authenticator.login() acima.
    # Nenhuma informa√ß√£o de usu√°rio ou logout na sidebar deve aparecer aqui.
    # As p√°ginas na pasta `pages/` ainda ser√£o listadas pelo Streamlit,
    # mas o acesso ao conte√∫do delas deve ser bloqueado pela verifica√ß√£o no topo de cada p√°gina.
    pass 

else: 
    # Este caso n√£o deveria ser alcan√ßado se as verifica√ß√µes acima estiverem corretas.
    st.error("A aplica√ß√£o n√£o p√¥de ser inicializada devido a um erro inesperado na autentica√ß√£o.")
    logger.error("Estado de autentica√ß√£o inv√°lido ou inesperado.")
    st.stop()

# Adicionar uma verifica√ß√£o final: se o usu√°rio n√£o est√° autenticado (status n√£o √© True),
# e estamos em painel.py, n√£o devemos mostrar nada al√©m do formul√°rio de login ou erros.
# Se o status √© None ou False, a l√≥gica acima j√° trata de exibir o formul√°rio ou erro.
# O principal √© que o conte√∫do "logado" (logout na sidebar, etc.) s√≥ aparece se status for True E token existir.