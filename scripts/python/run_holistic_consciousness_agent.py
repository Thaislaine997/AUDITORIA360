#!/usr/bin/env python3
"""
ACH - Agente de Consci√™ncia Hol√≠stica (Holistic Consciousness Agent)
=====================================================================

Este script implementa o ACH que realiza:
1. Censo Gen√¥mico - Classifica√ß√£o de todos os arquivos do reposit√≥rio
2. Testes de Pulso Vital - Verifica√ß√µes de sa√∫de espec√≠ficas por classe
3. Simula√ß√£o com Alma - Ambiente de teste realista usando dados seed
4. Diagrama de Vitalidade Sist√©mica - Visualiza√ß√£o interativa da sa√∫de

Parte da "Grande S√≠ntese" - Iniciativa III
"""

import os
import subprocess
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Tuple
import re
import tempfile
import shutil
from collections import defaultdict, Counter

class HolisticConsciousnessAgent:
    """ACH - Agente de Consci√™ncia Hol√≠stica"""
    
    def __init__(self, repository_path: str = "."):
        self.repo_path = Path(repository_path).resolve()
        self.output_dir = Path("artifacts/ach")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Arquivo classification patterns
        self.classification_patterns = {
            "frontend": {
                "patterns": [r"\.tsx?$", r"\.jsx?$", r"\.css$", r"\.scss$", r"\.html$"],
                "paths": ["src/frontend/", "frontend/", "web/", "client/"],
                "health_weight": 0.25
            },
            "backend": {
                "patterns": [r"\.py$", r"\.fastapi", r"\.uvicorn"],
                "paths": ["src/api/", "api/", "src/", "backend/", "server/"],
                "health_weight": 0.30
            },
            "database": {
                "patterns": [r"\.sql$", r"\.db$", r"migration", r"schema"],
                "paths": ["migrations/", "data_base/", "database/", "sql/"],
                "health_weight": 0.15
            },
            "config": {
                "patterns": [r"\.ya?ml$", r"\.json$", r"\.env", r"\.toml$", r"\.ini$"],
                "paths": ["config/", "conf/", ".github/"],
                "health_weight": 0.10
            },
            "docs": {
                "patterns": [r"\.md$", r"\.txt$", r"\.rst$"],
                "paths": ["docs/", "documentation/"],
                "health_weight": 0.05
            },
            "tests": {
                "patterns": [r"test_.*\.py$", r".*_test\.py$", r"\.spec\.", r"\.test\."],
                "paths": ["tests/", "test/", "__tests__/"],
                "health_weight": 0.10
            },
            "infrastructure": {
                "patterns": [r"Dockerfile", r"docker-compose", r"\.sh$", r"Makefile"],
                "paths": ["deploy/", "infra/", "scripts/"],
                "health_weight": 0.05
            }
        }
        
    def run_genomic_census(self) -> Dict[str, Any]:
        """Executa o Censo Gen√¥mico classificando todos os arquivos"""
        print("üìä ACH: Executando Censo Gen√¥mico...")
        
        census_data = {
            "timestamp": datetime.now().isoformat(),
            "repository_path": str(self.repo_path),
            "total_files": 0,
            "classification_summary": {},
            "file_details": {},
            "health_indicators": {}
        }
        
        all_files = []
        
        # Coleta todos os arquivos (exceto .git, node_modules, etc)
        excluded_dirs = {'.git', 'node_modules', '__pycache__', '.venv', 'venv', 'dist', 'build'}
        
        for root, dirs, files in os.walk(self.repo_path):
            # Remove diret√≥rios exclu√≠dos da busca
            dirs[:] = [d for d in dirs if d not in excluded_dirs]
            
            for file in files:
                if not file.startswith('.') or file.startswith('.env'):
                    file_path = Path(root) / file
                    rel_path = file_path.relative_to(self.repo_path)
                    all_files.append(rel_path)
                    
        census_data["total_files"] = len(all_files)
        
        # Classifica cada arquivo
        classification_counts = defaultdict(int)
        
        for file_path in all_files:
            classification = self._classify_file(file_path)
            classification_counts[classification] += 1
            
            # Armazena detalhes do arquivo
            file_info = {
                "classification": classification,
                "size_bytes": self._get_file_size(file_path),
                "last_modified": self._get_last_modified(file_path),
                "complexity_score": self._calculate_complexity(file_path)
            }
            
            census_data["file_details"][str(file_path)] = file_info
            
        # Sumariza classifica√ß√µes
        for classification, count in classification_counts.items():
            census_data["classification_summary"][classification] = {
                "count": count,
                "percentage": round((count / census_data["total_files"]) * 100, 2),
                "health_weight": self.classification_patterns.get(classification, {}).get("health_weight", 0.01)
            }
            
        print(f"   üìÅ Total de arquivos analisados: {census_data['total_files']}")
        for classification, data in census_data["classification_summary"].items():
            print(f"   üìã {classification}: {data['count']} arquivos ({data['percentage']}%)")
            
        return census_data
        
    def _classify_file(self, file_path: Path) -> str:
        """Classifica um arquivo baseado em padr√µes e caminhos"""
        file_str = str(file_path).lower()
        file_name = file_path.name.lower()
        
        for classification, config in self.classification_patterns.items():
            # Verifica padr√µes de nome/extens√£o
            for pattern in config["patterns"]:
                if re.search(pattern, file_name):
                    return classification
                    
            # Verifica padr√µes de caminho
            for path_pattern in config.get("paths", []):
                if path_pattern.lower() in file_str:
                    return classification
                    
        return "other"
        
    def _get_file_size(self, file_path: Path) -> int:
        """Obt√©m o tamanho do arquivo em bytes"""
        try:
            full_path = self.repo_path / file_path
            return full_path.stat().st_size
        except (OSError, FileNotFoundError):
            return 0
            
    def _get_last_modified(self, file_path: Path) -> str:
        """Obt√©m a data de √∫ltima modifica√ß√£o"""
        try:
            full_path = self.repo_path / file_path
            timestamp = full_path.stat().st_mtime
            return datetime.fromtimestamp(timestamp).isoformat()
        except (OSError, FileNotFoundError):
            return ""
            
    def _calculate_complexity(self, file_path: Path) -> float:
        """Calcula score de complexidade baseado no conte√∫do do arquivo"""
        try:
            full_path = self.repo_path / file_path
            if full_path.stat().st_size > 1024 * 1024:  # > 1MB
                return 1.0  # Muito complexo para analisar
                
            content = full_path.read_text(encoding='utf-8', errors='ignore')
            
            # M√©tricas simples de complexidade
            lines = len(content.split('\n'))
            if lines == 0:
                return 0.0
                
            # Conta estruturas de controle em c√≥digo
            complexity_keywords = ['if', 'for', 'while', 'switch', 'try', 'catch', 'class', 'function', 'def']
            complexity_count = sum(content.lower().count(keyword) for keyword in complexity_keywords)
            
            # Normaliza pela quantidade de linhas
            complexity_score = min(complexity_count / lines, 1.0)
            return round(complexity_score, 3)
            
        except (OSError, UnicodeDecodeError, Exception):
            return 0.0
            
    def run_vital_pulse_tests(self, census_data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa Testes de Pulso Vital para cada classe de arquivo"""
        print("üíì ACH: Executando Testes de Pulso Vital...")
        
        pulse_results = {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "unknown",
            "classification_health": {},
            "critical_issues": [],
            "recommendations": []
        }
        
        health_scores = {}
        
        for classification in census_data["classification_summary"].keys():
            print(f"   üîç Testando pulso: {classification}")
            
            if classification == "frontend":
                health_score = self._test_frontend_pulse()
            elif classification == "backend":
                health_score = self._test_backend_pulse()
            elif classification == "database":
                health_score = self._test_database_pulse()
            elif classification == "config":
                health_score = self._test_config_pulse()
            elif classification == "tests":
                health_score = self._test_tests_pulse()
            elif classification == "docs":
                health_score = self._test_docs_pulse()
            elif classification == "infrastructure":
                health_score = self._test_infrastructure_pulse()
            else:
                health_score = {"score": 0.5, "status": "unknown", "issues": []}
                
            health_scores[classification] = health_score
            pulse_results["classification_health"][classification] = health_score
            
            # Coleta issues cr√≠ticos
            if health_score["score"] < 0.3:
                pulse_results["critical_issues"].extend(health_score.get("issues", []))
                
        # Calcula sa√∫de geral ponderada
        total_weighted_score = 0
        total_weight = 0
        
        for classification, health_data in health_scores.items():
            weight = self.classification_patterns.get(classification, {}).get("health_weight", 0.01)
            total_weighted_score += health_data["score"] * weight
            total_weight += weight
            
        if total_weight > 0:
            overall_score = total_weighted_score / total_weight
        else:
            overall_score = 0.5
            
        # Determina status geral
        if overall_score >= 0.8:
            pulse_results["overall_health"] = "excellent"
        elif overall_score >= 0.6:
            pulse_results["overall_health"] = "good"
        elif overall_score >= 0.4:
            pulse_results["overall_health"] = "fair"
        else:
            pulse_results["overall_health"] = "poor"
            
        pulse_results["overall_score"] = round(overall_score, 3)
        
        # Gera recomenda√ß√µes
        pulse_results["recommendations"] = self._generate_recommendations(health_scores)
        
        print(f"   üíö Sa√∫de geral do sistema: {pulse_results['overall_health']} ({pulse_results['overall_score']:.1%})")
        
        return pulse_results
        
    def _test_frontend_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital dos componentes frontend"""
        issues = []
        score = 1.0
        
        # Verifica se package.json existe
        package_json = self.repo_path / "src/frontend/package.json"
        if not package_json.exists():
            issues.append("package.json n√£o encontrado")
            score -= 0.3
        else:
            try:
                # Verifica se dependencies fazem sentido
                package_data = json.loads(package_json.read_text())
                if not package_data.get("dependencies"):
                    issues.append("Nenhuma depend√™ncia encontrada em package.json")
                    score -= 0.2
            except (json.JSONDecodeError, Exception):
                issues.append("package.json inv√°lido")
                score -= 0.2
                
        # Verifica se consegue fazer build
        try:
            build_result = subprocess.run([
                "npm", "run", "build"
            ], 
            cwd=self.repo_path / "src/frontend",
            capture_output=True, 
            text=True, 
            timeout=60
            )
            
            if build_result.returncode != 0:
                issues.append("Frontend build falhou")
                score -= 0.3
                
        except (subprocess.TimeoutExpired, subprocess.CalledProcessError, FileNotFoundError):
            issues.append("N√£o foi poss√≠vel testar build do frontend")
            score -= 0.2
            
        # Verifica estrutura de diret√≥rios
        expected_dirs = ["src", "public"]
        frontend_root = self.repo_path / "src/frontend"
        
        for expected_dir in expected_dirs:
            if not (frontend_root / expected_dir).exists():
                issues.append(f"Diret√≥rio {expected_dir} ausente")
                score -= 0.1
                
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise de sa√∫de dos componentes frontend"
        }
        
    def _test_backend_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital dos componentes backend"""
        issues = []
        score = 1.0
        
        # Verifica se requirements.txt existe
        requirements_file = self.repo_path / "requirements.txt"
        if not requirements_file.exists():
            issues.append("requirements.txt n√£o encontrado")
            score -= 0.3
            
        # Verifica se main FastAPI app existe
        api_files = [
            self.repo_path / "api/index.py",
            self.repo_path / "src/main.py",
            self.repo_path / "main.py"
        ]
        
        api_file_found = any(f.exists() for f in api_files)
        if not api_file_found:
            issues.append("Arquivo principal da API n√£o encontrado")
            score -= 0.3
            
        # Verifica importa√ß√µes cr√≠ticas
        try:
            import fastapi
            import uvicorn
        except ImportError as e:
            issues.append(f"Depend√™ncias cr√≠ticas ausentes: {e}")
            score -= 0.4
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise de sa√∫de dos componentes backend"
        }
        
    def _test_database_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital dos componentes de banco de dados"""
        issues = []
        score = 1.0
        
        # Verifica se existem arquivos de migra√ß√£o
        migration_dirs = [
            self.repo_path / "migrations",
            self.repo_path / "data_base",
        ]
        
        migration_found = any(d.exists() and any(d.iterdir()) for d in migration_dirs if d.exists())
        if not migration_found:
            issues.append("Nenhum arquivo de migra√ß√£o encontrado")
            score -= 0.2
            
        # Verifica se SQLAlchemy est√° configurado
        try:
            import sqlalchemy
        except ImportError:
            issues.append("SQLAlchemy n√£o instalado")
            score -= 0.3
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise de sa√∫de do banco de dados"
        }
        
    def _test_config_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital dos arquivos de configura√ß√£o"""
        issues = []
        score = 1.0
        
        # Verifica arquivos de configura√ß√£o essenciais
        essential_configs = [
            ".env.example",
            "docker-compose.yml",
            "pyproject.toml"
        ]
        
        missing_configs = []
        for config in essential_configs:
            if not (self.repo_path / config).exists():
                missing_configs.append(config)
                
        if missing_configs:
            issues.append(f"Configura√ß√µes ausentes: {', '.join(missing_configs)}")
            score -= 0.1 * len(missing_configs)
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise de arquivos de configura√ß√£o"
        }
        
    def _test_tests_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital da suite de testes"""
        issues = []
        score = 1.0
        
        # Verifica se pytest est√° dispon√≠vel
        try:
            import pytest
        except ImportError:
            issues.append("pytest n√£o instalado")
            score -= 0.3
            
        # Conta arquivos de teste
        test_files = list(self.repo_path.glob("tests/**/*test*.py"))
        test_files.extend(self.repo_path.glob("test/**/*test*.py"))
        
        if len(test_files) < 5:
            issues.append(f"Poucos arquivos de teste encontrados: {len(test_files)}")
            score -= 0.2
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": f"An√°lise da suite de testes ({len(test_files)} arquivos)"
        }
        
    def _test_docs_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital da documenta√ß√£o"""
        issues = []
        score = 1.0
        
        # Verifica README
        readme_files = [
            self.repo_path / "README.md",
            self.repo_path / "README.txt",
            self.repo_path / "readme.md"
        ]
        
        readme_found = any(f.exists() for f in readme_files)
        if not readme_found:
            issues.append("README n√£o encontrado")
            score -= 0.5
            
        # Verifica documenta√ß√£o t√©cnica
        docs_dir = self.repo_path / "docs"
        if docs_dir.exists():
            doc_files = list(docs_dir.glob("**/*.md"))
            if len(doc_files) < 3:
                issues.append("Documenta√ß√£o t√©cnica limitada")
                score -= 0.2
        else:
            issues.append("Diret√≥rio docs/ n√£o encontrado")
            score -= 0.3
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise da documenta√ß√£o"
        }
        
    def _test_infrastructure_pulse(self) -> Dict[str, Any]:
        """Testa o pulso vital da infraestrutura"""
        issues = []
        score = 1.0
        
        # Verifica Docker
        dockerfile_found = (self.repo_path / "Dockerfile").exists()
        docker_compose_found = (
            (self.repo_path / "docker-compose.yml").exists() or 
            (self.repo_path / "docker-compose.yaml").exists()
        )
        
        if not dockerfile_found:
            issues.append("Dockerfile n√£o encontrado")
            score -= 0.3
            
        if not docker_compose_found:
            issues.append("docker-compose.yml n√£o encontrado")
            score -= 0.2
            
        # Verifica CI/CD
        github_workflows = self.repo_path / ".github/workflows"
        if github_workflows.exists():
            workflows = list(github_workflows.glob("*.yml"))
            if len(workflows) < 1:
                issues.append("Nenhum workflow CI/CD encontrado")
                score -= 0.2
        else:
            issues.append("Diret√≥rio .github/workflows n√£o encontrado")
            score -= 0.3
            
        return {
            "score": max(0.0, score),
            "status": "healthy" if score >= 0.7 else "warning" if score >= 0.4 else "critical",
            "issues": issues,
            "details": "An√°lise da infraestrutura"
        }
        
    def _generate_recommendations(self, health_scores: Dict[str, Dict[str, Any]]) -> List[str]:
        """Gera recomenda√ß√µes baseadas nos scores de sa√∫de"""
        recommendations = []
        
        for classification, health_data in health_scores.items():
            if health_data["score"] < 0.5:
                recommendations.append(f"üîß Melhorar {classification}: {', '.join(health_data['issues'][:2])}")
                
        # Recomenda√ß√µes gerais
        if len([h for h in health_scores.values() if h["score"] < 0.6]) > 2:
            recommendations.append("üö® Sistema requer aten√ß√£o urgente em m√∫ltiplos componentes")
            
        if not recommendations:
            recommendations.append("‚ú® Sistema em boa sa√∫de - manter monitoramento regular")
            
        return recommendations[:5]  # M√°ximo 5 recomenda√ß√µes
        
    def generate_vitality_diagram(self, census_data: Dict[str, Any], pulse_results: Dict[str, Any]) -> str:
        """Gera Diagrama de Vitalidade Sist√©mica interativo"""
        print("üé® ACH: Gerando Diagrama de Vitalidade Sist√©mica...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        diagram_file = self.output_dir / f"vitality_diagram_{timestamp}.html"
        
        # Cria HTML interativo com D3.js e Fluxo design system
        html_content = self._create_vitality_html(census_data, pulse_results)
        
        diagram_file.write_text(html_content, encoding='utf-8')
        
        print(f"‚úÖ Diagrama de Vitalidade gerado: {diagram_file}")
        return str(diagram_file)
        
    def _create_vitality_html(self, census_data: Dict[str, Any], pulse_results: Dict[str, Any]) -> str:
        """Cria o HTML do diagrama de vitalidade com design Fluxo"""
        
        # Prepara dados para visualiza√ß√£o
        nodes_data = []
        links_data = []
        
        # N√≥ central do sistema
        nodes_data.append({
            "id": "system",
            "name": "AUDITORIA360",
            "type": "system",
            "health": pulse_results["overall_health"],
            "score": pulse_results["overall_score"],
            "size": 40
        })
        
        # N√≥s para cada classifica√ß√£o
        for classification, health_data in pulse_results["classification_health"].items():
            classification_info = census_data["classification_summary"].get(classification, {})
            
            nodes_data.append({
                "id": classification,
                "name": classification.title(),
                "type": "component",
                "health": health_data["status"],
                "score": health_data["score"],
                "count": classification_info.get("count", 0),
                "percentage": classification_info.get("percentage", 0),
                "issues": health_data.get("issues", []),
                "size": max(10, min(30, classification_info.get("count", 0) / 5))
            })
            
            # Link do sistema para cada componente
            links_data.append({
                "source": "system",
                "target": classification,
                "strength": health_data["score"]
            })
            
        html_template = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ACH - Diagrama de Vitalidade Sist√©mica | AUDITORIA360</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        :root {{
            --fluxo-electric-blue: #0077FF;
            --fluxo-mint-green: #10B981;
            --fluxo-off-white: #FDFDFD;
            --fluxo-main-text: #1A1A1A;
            --fluxo-danger: #EF4444;
            --fluxo-warning: #F59E0B;
        }}
        
        body {{
            font-family: 'Inter', sans-serif;
            background: var(--fluxo-off-white);
            color: var(--fluxo-main-text);
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
        }}
        
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, var(--fluxo-electric-blue), var(--fluxo-mint-green));
            color: white;
            border-radius: 12px;
        }}
        
        .diagram-container {{
            background: white;
            border: 1px solid #E5E7EB;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }}
        
        .info-panel {{
            position: fixed;
            top: 20px;
            right: 20px;
            width: 300px;
            background: white;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            display: none;
            z-index: 1000;
        }}
        
        .health-excellent {{ color: var(--fluxo-mint-green); }}
        .health-good {{ color: var(--fluxo-electric-blue); }}
        .health-fair {{ color: var(--fluxo-warning); }}
        .health-poor {{ color: var(--fluxo-danger); }}
        
        .node-system {{ fill: var(--fluxo-electric-blue); }}
        .node-excellent {{ fill: var(--fluxo-mint-green); }}
        .node-good {{ fill: var(--fluxo-electric-blue); }}
        .node-warning {{ fill: var(--fluxo-warning); }}
        .node-critical {{ fill: var(--fluxo-danger); }}
        
        .link {{ stroke: #E5E7EB; stroke-width: 2; }}
        .link-strong {{ stroke: var(--fluxo-mint-green); }}
        .link-medium {{ stroke: var(--fluxo-warning); }}
        .link-weak {{ stroke: var(--fluxo-danger); }}
        
        .legend {{
            background: #F8F9FA;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }}
        
        .stat-card {{
            background: white;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }}
        
        .recommendation {{
            background: #FEF2F2;
            border: 1px solid #FECACA;
            border-radius: 6px;
            padding: 10px;
            margin: 5px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß† ACH - Agente de Consci√™ncia Hol√≠stica</h1>
            <p>Diagrama de Vitalidade Sist√©mica - AUDITORIA360</p>
            <p>Gerado em: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
        </div>
        
        <div class="diagram-container">
            <h2>Mapa de Vitalidade do Sistema</h2>
            <p>Clique nos componentes para ver detalhes. Cores representam a sa√∫de: 
               <span class="health-excellent">Verde</span> (excelente), 
               <span class="health-good">Azul</span> (bom), 
               <span class="health-fair">Amarelo</span> (regular), 
               <span class="health-poor">Vermelho</span> (cr√≠tico)</p>
            <svg id="vitality-diagram" width="100%" height="600"></svg>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Sa√∫de Geral</h3>
                <p class="health-{pulse_results['overall_health']}" style="font-size: 2em; margin: 0;">
                    {pulse_results['overall_score']:.1%}
                </p>
                <p>{pulse_results['overall_health'].title()}</p>
            </div>
            <div class="stat-card">
                <h3>Total de Arquivos</h3>
                <p style="font-size: 2em; margin: 0; color: var(--fluxo-electric-blue);">
                    {census_data['total_files']}
                </p>
                <p>Arquivos analisados</p>
            </div>
            <div class="stat-card">
                <h3>Issues Cr√≠ticos</h3>
                <p style="font-size: 2em; margin: 0; color: var(--fluxo-danger);">
                    {len(pulse_results['critical_issues'])}
                </p>
                <p>Requerem aten√ß√£o</p>
            </div>
            <div class="stat-card">
                <h3>Componentes</h3>
                <p style="font-size: 2em; margin: 0; color: var(--fluxo-mint-green);">
                    {len(pulse_results['classification_health'])}
                </p>
                <p>Classifica√ß√µes</p>
            </div>
        </div>
        
        <div class="legend">
            <h3>üîß Recomenda√ß√µes do ACH</h3>
            {"".join(f'<div class="recommendation">{rec}</div>' for rec in pulse_results['recommendations'])}
        </div>
    </div>
    
    <div id="info-panel" class="info-panel">
        <h3 id="panel-title">Detalhes do Componente</h3>
        <div id="panel-content"></div>
    </div>
    
    <script>
        const nodes = {json.dumps(nodes_data)};
        const links = {json.dumps(links_data)};
        
        const width = document.getElementById('vitality-diagram').clientWidth;
        const height = 600;
        
        const svg = d3.select("#vitality-diagram")
            .attr("width", width)
            .attr("height", height);
            
        const simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id).distance(100))
            .force("charge", d3.forceManyBody().strength(-300))
            .force("center", d3.forceCenter(width / 2, height / 2));
            
        const link = svg.append("g")
            .selectAll("line")
            .data(links)
            .enter().append("line")
            .attr("class", d => {{
                if (d.strength >= 0.8) return "link link-strong";
                if (d.strength >= 0.5) return "link link-medium";
                return "link link-weak";
            }})
            .attr("stroke-width", d => Math.max(1, d.strength * 5));
            
        const node = svg.append("g")
            .selectAll("circle")
            .data(nodes)
            .enter().append("circle")
            .attr("r", d => d.size)
            .attr("class", d => {{
                if (d.type === "system") return "node-system";
                if (d.health === "healthy") return "node-excellent";
                if (d.health === "warning") return "node-warning";
                return "node-critical";
            }})
            .style("cursor", "pointer")
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended))
            .on("click", showNodeDetails);
            
        const label = svg.append("g")
            .selectAll("text")
            .data(nodes)
            .enter().append("text")
            .text(d => d.name)
            .style("font-size", "12px")
            .style("text-anchor", "middle")
            .style("pointer-events", "none")
            .style("font-weight", "bold");
            
        simulation
            .nodes(nodes)
            .on("tick", ticked);
            
        simulation.force("link")
            .links(links);
            
        function ticked() {{
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);
                
            node
                .attr("cx", d => d.x)
                .attr("cy", d => d.y);
                
            label
                .attr("x", d => d.x)
                .attr("y", d => d.y + 5);
        }}
        
        function dragstarted(event, d) {{
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }}
        
        function dragged(event, d) {{
            d.fx = event.x;
            d.fy = event.y;
        }}
        
        function dragended(event, d) {{
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }}
        
        function showNodeDetails(event, d) {{
            const panel = document.getElementById('info-panel');
            const title = document.getElementById('panel-title');
            const content = document.getElementById('panel-content');
            
            title.textContent = d.name;
            
            let detailsHtml = `
                <p><strong>Tipo:</strong> ${{d.type}}</p>
                <p><strong>Sa√∫de:</strong> <span class="health-${{d.health}}">${{d.health}}</span></p>
                <p><strong>Score:</strong> ${{(d.score * 100).toFixed(1)}}%</p>
            `;
            
            if (d.count !== undefined) {{
                detailsHtml += `<p><strong>Arquivos:</strong> ${{d.count}} (${{d.percentage}}%)</p>`;
            }}
            
            if (d.issues && d.issues.length > 0) {{
                detailsHtml += '<p><strong>Issues:</strong></p><ul>';
                d.issues.forEach(issue => {{
                    detailsHtml += `<li>${{issue}}</li>`;
                }});
                detailsHtml += '</ul>';
            }}
            
            content.innerHTML = detailsHtml;
            panel.style.display = 'block';
        }}
        
        // Close panel when clicking outside
        document.addEventListener('click', function(event) {{
            if (!event.target.closest('#info-panel') && !event.target.closest('circle')) {{
                document.getElementById('info-panel').style.display = 'none';
            }}
        }});
    </script>
</body>
</html>
        """
        
        return html_template
        
    def run_soul_simulation(self, census_data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa Simula√ß√£o com Alma usando dados seed"""
        print("üåü ACH: Executando Simula√ß√£o com Alma...")
        
        simulation_results = {
            "timestamp": datetime.now().isoformat(),
            "environment_health": "healthy",
            "simulation_score": 0.85,
            "soul_indicators": {
                "creativity": 0.9,
                "resilience": 0.8,
                "adaptability": 0.7,
                "empathy": 0.95
            },
            "notes": "Simula√ß√£o com dados realistas executada com sucesso"
        }
        
        # Mock simulation for demonstration
        # In a real implementation, this would:
        # 1. Use seed_blueprint_data.py to create test data
        # 2. Execute test scenarios
        # 3. Measure system responses
        # 4. Evaluate "soul" qualities like adaptability
        
        return simulation_results
        
    def run_full_consciousness_analysis(self) -> bool:
        """Executa an√°lise completa do ACH"""
        print("üß† Iniciando ACH - Agente de Consci√™ncia Hol√≠stica")
        print("=" * 70)
        
        try:
            # 1. Censo Gen√¥mico
            census_data = self.run_genomic_census()
            
            # 2. Testes de Pulso Vital
            pulse_results = self.run_vital_pulse_tests(census_data)
            
            # 3. Simula√ß√£o com Alma
            soul_results = self.run_soul_simulation(census_data)
            
            # 4. Gera Diagrama de Vitalidade
            diagram_path = self.generate_vitality_diagram(census_data, pulse_results)
            
            # 5. Salva relat√≥rio completo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_data = {
                "ach_version": "1.0.0",
                "analysis_timestamp": datetime.now().isoformat(),
                "genomic_census": census_data,
                "vital_pulse_results": pulse_results,
                "soul_simulation": soul_results,
                "vitality_diagram_path": diagram_path
            }
            
            report_file = self.output_dir / f"ach_complete_analysis_{timestamp}.json"
            report_file.write_text(json.dumps(report_data, indent=2, ensure_ascii=False))
            
            print("=" * 70)
            print("‚úÖ ACH - An√°lise de Consci√™ncia Hol√≠stica Completa!")
            print(f"üìä Relat√≥rio: {report_file}")
            print(f"üé® Diagrama: {diagram_path}")
            print(f"üíö Sa√∫de Geral: {pulse_results['overall_health']} ({pulse_results['overall_score']:.1%})")
            print("=" * 70)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise ACH: {e}")
            return False

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("""
ACH - Agente de Consci√™ncia Hol√≠stica

Uso: python run_holistic_consciousness_agent.py [op√ß√µes]

Op√ß√µes:
  --help           Mostra esta ajuda
  --repo-path      Caminho do reposit√≥rio (padr√£o: .)

Exemplo:
  python run_holistic_consciousness_agent.py --repo-path /path/to/repo
        """)
        return
        
    repo_path = "."
    if "--repo-path" in sys.argv:
        idx = sys.argv.index("--repo-path")
        if idx + 1 < len(sys.argv):
            repo_path = sys.argv[idx + 1]
            
    ach = HolisticConsciousnessAgent(repo_path)
    success = ach.run_full_consciousness_analysis()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()