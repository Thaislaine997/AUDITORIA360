-- =====================================================================
-- AUDITORIA360 - SCRIPT CONSOLIDADO DE VALIDA√á√ÉO DE PRODU√á√ÉO
-- =====================================================================
-- [VALIDA√á√ÉO] Auditoria Completa da Configura√ß√£o de Produ√ß√£o
--
-- Objetivo: Validar de forma sistem√°tica a estrutura da base de dados, 
-- a implementa√ß√£o da seguran√ßa multi-tenant (RLS) e a integridade dos dados, 
-- garantindo que a plataforma auditoria360 est√° corretamente configurada 
-- conforme o planeado.
-- =====================================================================

-- INSTRU√á√ïES DE USO:
-- Execute cada se√ß√£o deste script no seu Editor SQL da Supabase.
-- Analise os resultados de cada um conforme a descri√ß√£o para diagnosticar 
-- a sa√∫de do seu sistema.

-- =====================================================================
-- PARTE 1: VERIFICA√á√ÉO DO SCHEMA DA BASE DE DADOS
-- =====================================================================
-- Estes scripts verificam se a "planta" da sua base de dados est√° correta.

-- 1.1. üìú Script para verificar se todas as tabelas principais existem:
SELECT
    '1.1 - Verifica√ß√£o de Tabelas Principais' AS teste,
    table_name,
    EXISTS (
        SELECT 1
        FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = T.table_name
    ) AS tabela_existe
FROM (VALUES
    ('Contabilidades'),
    ('Empresas'),
    ('ControlesMensais'),
    ('Documentos'),
    ('TarefasControle'),
    ('profiles')
) AS T(table_name);

-- 1.2. üîó Script para verificar as colunas e rela√ß√µes chave (Multi-Tenant):
SELECT
    '1.2 - Verifica√ß√£o de Colunas Multi-Tenant' AS teste,
    table_name,
    column_name,
    data_type
FROM information_schema.columns
WHERE
    (table_name = 'Empresas' AND column_name = 'contabilidade_id') OR
    (table_name = 'profiles' AND column_name = 'contabilidade_id') OR
    (table_name = 'profiles' AND column_name = 'id' AND data_type = 'uuid');

-- =====================================================================
-- PARTE 2: AUDITORIA DA SEGURAN√áA MULTI-TENANT (RLS)
-- =====================================================================
-- Esta √© a auditoria mais importante. Vamos verificar se as "paredes" 
-- de seguran√ßa entre os seus clientes est√£o de p√©.

-- 2.1. üîí Script para verificar se a RLS est√° ATIVA nas tabelas:
SELECT
    '2.1 - Status da Row Level Security (RLS)' AS teste,
    c.relname AS table_name,
    c.relrowsecurity AS rls_ativada
FROM pg_catalog.pg_class c
JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE n.nspname = 'public'
AND c.relname IN ('Empresas', 'ControlesMensais', 'Documentos', 'TarefasControle');

-- 2.2. üõ°Ô∏è Script para listar as pol√≠ticas de seguran√ßa aplicadas:
SELECT
    '2.2 - Pol√≠ticas de Seguran√ßa Ativas' AS teste,
    schemaname,
    tablename,
    policyname,
    cmd AS tipo_comando, -- SELECT, INSERT, UPDATE, DELETE, ALL
    qual AS regra_aplicada -- A condi√ß√£o da pol√≠tica
FROM pg_policies
WHERE tablename IN ('Empresas', 'ControlesMensais', 'Documentos', 'TarefasControle');

-- =====================================================================
-- PARTE 3: VERIFICA√á√ÉO DA INTEGRIDADE DOS DADOS
-- =====================================================================
-- Agora, vamos inspecionar os dados em si para garantir que est√£o 
-- corretamente ligados.

-- 3.1. üè¢ Script para verificar se as contabilidades foram inseridas:
SELECT
    '3.1 - Contabilidades Registadas' AS teste,
    id, 
    nome_contabilidade, 
    cnpj 
FROM public."Contabilidades";

-- 3.2. ü§ù Script para verificar a liga√ß√£o entre Utilizadores e Contabilidades:
SELECT
    '3.2 - Rela√ß√£o Utilizadores-Contabilidades' AS teste,
    u.id AS user_id,
    u.email,
    p.contabilidade_id,
    c.nome_contabilidade
FROM auth.users u
LEFT JOIN public.profiles p ON u.id = p.id
LEFT JOIN public."Contabilidades" c ON p.contabilidade_id = c.id
ORDER BY u.created_at;

-- 3.3. üìà Script para verificar a liga√ß√£o entre Empresas e Contabilidades:
SELECT
    '3.3a - Empresas por Contabilidade' AS teste,
    c.nome_contabilidade,
    COUNT(e.id) AS numero_de_empresas_associadas
FROM public."Contabilidades" c
LEFT JOIN public."Empresas" e ON c.id = e.contabilidade_id
GROUP BY c.nome_contabilidade;

-- Verifica√ß√£o de empresas "√≥rf√£s" (n√£o ligadas a nenhuma contabilidade)
SELECT
    '3.3b - Empresas √ìrf√£s (SEM contabilidade)' AS teste,
    id, 
    nome 
FROM public."Empresas" 
WHERE contabilidade_id IS NULL;

-- =====================================================================
-- RESUMO DA VALIDA√á√ÉO
-- =====================================================================
-- Se todos os scripts executarem e os resultados forem os esperados, 
-- especialmente os da Parte 2 (Auditoria de Seguran√ßa) e o 3.2 
-- (Liga√ß√£o Utilizador-Contabilidade), pode ter uma excelente confian√ßa 
-- de que a sua plataforma est√° corretamente configurada para operar 
-- de forma segura e multi-tenant.
--
-- Qualquer resultado inesperado √© um ponto de aten√ß√£o que deve ser 
-- corrigido antes de avan√ßar.
-- =====================================================================