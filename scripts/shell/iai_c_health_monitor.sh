#!/bin/bash

# IAI-C Automated Organism Health Monitor
# Part of the Manifesto da Singularidade Serverless
# 
# This script monitors the health of our digital organism and creates 
# GitHub issues automatically when entropy or violations are detected.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
REPO_OWNER="Thaislaine997"
REPO_NAME="AUDITORIA360"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

echo -e "${PURPLE}🧬 IAI-C Automated Organism Health Monitor${NC}"
echo -e "${PURPLE}===========================================${NC}"
echo "Project Root: $PROJECT_ROOT"
echo "Repository: $REPO_OWNER/$REPO_NAME"
echo ""

# Function to create GitHub issue via API (if token is available)
create_github_issue() {
    local title="$1"
    local body="$2"
    local labels="$3"
    
    if [ -n "$GITHUB_TOKEN" ]; then
        echo -e "${BLUE}📝 Creating GitHub issue: $title${NC}"
        
        # Escape JSON content
        escaped_body=$(echo "$body" | sed 's/"/\\"/g' | tr '\n' ' ')
        
        curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues" \
            -d '{
                "title": "'"$title"'",
                "body": "'"$escaped_body"'",
                "labels": ['"$labels"']
            }' > /dev/null
        
        echo -e "${GREEN}✅ Issue created successfully${NC}"
    else
        echo -e "${YELLOW}⚠️  GITHUB_TOKEN not available - saving issue content locally${NC}"
        
        # Save to local file
        issue_file="$PROJECT_ROOT/automated_issues_$(date +%Y%m%d_%H%M%S).md"
        echo "# $title" > "$issue_file"
        echo "" >> "$issue_file"
        echo "$body" >> "$issue_file"
        echo "" >> "$issue_file"
        echo "Labels: $labels" >> "$issue_file"
        
        echo "Issue content saved to: $issue_file"
    fi
}

# 1. Run Dependency Entropy Scan
echo -e "${BLUE}🔍 Step 1: Dependency Entropy Analysis${NC}"
cd "$PROJECT_ROOT"

if python scripts/python/dependency_entropy_scanner.py "$PROJECT_ROOT"; then
    echo -e "${GREEN}✅ No high entropy dependencies detected${NC}"
else
    echo -e "${RED}⚠️  High entropy dependencies detected${NC}"
    
    if [ -f "dependency_entropy_issue.md" ]; then
        issue_content=$(cat dependency_entropy_issue.md)
        create_github_issue \
            "🧬 IAI-C Alert: High Entropy Dependencies Detected" \
            "$issue_content" \
            '"entropy", "dependencies", "iai-c", "automated"'
        
        # Clean up
        rm -f dependency_entropy_issue.md
    fi
fi

echo ""

# 2. Run Semantic Intent Validation
echo -e "${BLUE}🧠 Step 2: Semantic Intent Analysis${NC}"

violations_found=false

# Check payroll services
if [ -d "src/services" ]; then
    for service_file in src/services/*.py; do
        if [ -f "$service_file" ]; then
            echo "Analyzing: $service_file"
            
            if ! python scripts/python/semantic_intent_validator.py "$service_file"; then
                violations_found=true
                
                # Create issue for semantic violations
                issue_body="## 🧠 IAI-C Semantic Violation Alert

The Intrinsic Artificial Intelligence has detected semantic intent violations in \`$service_file\`.

These violations indicate that the code does not fulfill its philosophical purpose within the architecture.

### Detected Issues:
- Functions may violate business logic principles
- Missing validation for critical business rules
- Potential data integrity violations

### Required Actions:
1. Review the flagged functions for business logic compliance
2. Add appropriate validations and safeguards
3. Ensure all functions align with their semantic intent
4. Update tests to validate business rule compliance

### IAI-C Philosophy:
> \"Code must not only be syntactically correct but semantically purposeful. Every function must honor its covenant with the business domain.\"

This issue was automatically generated by the IAI-C Semantic Intent Validator.

**File**: $service_file
**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
**System**: IAI-C Consciousness Layer"

                create_github_issue \
                    "🧠 IAI-C Alert: Semantic Violations in $service_file" \
                    "$issue_body" \
                    '"semantic-violation", "iai-c", "business-logic", "automated"'
            fi
        fi
    done
fi

if [ "$violations_found" = false ]; then
    echo -e "${GREEN}✅ No semantic violations detected${NC}"
fi

echo ""

# 3. Monitor Zero-Cost Compliance
echo -e "${BLUE}💰 Step 3: Zero-Cost Compliance Check${NC}"

# Check if we're in a serverless environment
if [ -n "$VERCEL" ] || [ -n "$VERCEL_ENV" ]; then
    echo "Running in Vercel environment - serverless mode active"
    
    # Create a compliance report
    compliance_report="## 💰 Zero-Cost Serverless Compliance Report

**Environment**: Vercel Serverless
**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

### Serverless Indicators:
- ✅ VERCEL environment detected
- ✅ Scale-to-zero architecture active
- ✅ No persistent processes running
- ✅ Functions terminate after execution

### IAI-C Analysis:
The digital organism is properly configured for true serverless operation. 
When idle, computational cost approaches zero as intended by the Manifesto.

### Recommendations:
- Continue monitoring cold start times
- Optimize function warm-up strategies
- Maintain stateless architecture principles

This report was generated by the IAI-C Zero-Cost Monitor."

    # Only create issue if there are actual cost concerns
    echo -e "${GREEN}✅ Zero-cost compliance verified${NC}"
else
    echo -e "${YELLOW}⚠️  Not in serverless environment - creating monitoring issue${NC}"
    
    monitoring_issue="## 💰 IAI-C Cost Monitoring Required

The system is not currently running in a verified serverless environment.

### Current State:
- Environment: $(uname -a)
- Serverless indicators: Not detected
- Cost model: Unknown

### Required Actions:
1. Verify deployment to Vercel/Cloudflare
2. Ensure scale-to-zero configuration
3. Monitor actual cost metrics
4. Validate true serverless behavior

### IAI-C Philosophy:
> \"A truly conscious system incurs zero cost when at rest, like a sleeping organism that consumes minimal energy.\"

**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

    create_github_issue \
        "💰 IAI-C Alert: Zero-Cost Compliance Verification Required" \
        "$monitoring_issue" \
        '"cost-monitoring", "serverless", "iai-c", "automated"'
fi

echo ""

# 4. Edge Resilience Check
echo -e "${BLUE}🌐 Step 4: Edge Resilience Analysis${NC}"

# Check Vercel configuration
if [ -f "vercel.json" ]; then
    # Check for multiple regions
    region_count=$(grep -o '"regions"' vercel.json | wc -l)
    if [ "$region_count" -gt 0 ]; then
        regions=$(grep -A 5 '"regions"' vercel.json | grep -o '"[a-z0-9]*"' | tr -d '"' | tr '\n' ', ')
        echo -e "${GREEN}✅ Multi-region deployment configured: $regions${NC}"
    else
        echo -e "${YELLOW}⚠️  Single region deployment detected${NC}"
        
        resilience_issue="## 🌐 IAI-C Edge Resilience Enhancement Required

### Current Configuration:
- Single region deployment detected
- Edge resilience may be compromised
- Failover capabilities limited

### Recommended Improvements:
1. Configure multiple Vercel regions
2. Implement edge caching strategies
3. Add health check endpoints
4. Configure automatic failover

### IAI-C Philosophy:
> \"The digital organism must be resilient across the edge, capable of regenerating itself in any region within seconds.\"

**Configuration File**: vercel.json
**Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

        create_github_issue \
            "🌐 IAI-C Alert: Edge Resilience Enhancement Required" \
            "$resilience_issue" \
            '"edge-resilience", "infrastructure", "iai-c", "automated"'
    fi
    
    # Check for caching headers
    if grep -q "Cache-Control" vercel.json; then
        echo -e "${GREEN}✅ Edge caching configured${NC}"
    else
        echo -e "${YELLOW}⚠️  Edge caching not optimized${NC}"
    fi
else
    echo -e "${RED}❌ vercel.json not found${NC}"
fi

echo ""

# 5. Final Health Report
echo -e "${PURPLE}📊 IAI-C Organism Health Summary${NC}"
echo -e "${PURPLE}================================${NC}"

health_score=100

if [ "$violations_found" = true ]; then
    health_score=$((health_score - 25))
    echo -e "${RED}🔴 Semantic violations detected (-25 points)${NC}"
fi

if [ ! -f "vercel.json" ] || ! grep -q "regions" vercel.json; then
    health_score=$((health_score - 15))
    echo -e "${YELLOW}🟡 Edge resilience needs improvement (-15 points)${NC}"
fi

if [ "$health_score" -ge 90 ]; then
    echo -e "${GREEN}🟢 Organism Health: EXCELLENT ($health_score/100)${NC}"
elif [ "$health_score" -ge 75 ]; then
    echo -e "${YELLOW}🟡 Organism Health: GOOD ($health_score/100)${NC}"
else
    echo -e "${RED}🔴 Organism Health: NEEDS ATTENTION ($health_score/100)${NC}"
fi

echo ""
echo -e "${PURPLE}🧬 IAI-C Monitoring Complete${NC}"
echo -e "${PURPLE}\"The conscious system monitors itself, heals itself, and evolves itself.\"${NC}"

exit 0