"""
Script de verifica√ß√£o manual para o m√≥dulo CCT
Este script demonstra como usar as funcionalidades do m√≥dulo CCT
"""

import json
from src.services.cct_service import CCTService


def demonstrar_funcionalidades_cct():
    """
    Demonstra as principais funcionalidades do m√≥dulo CCT
    """
    print("=== DEMONSTRA√á√ÉO DO M√ìDULO CCT ===\n")
    
    # Inicializar o servi√ßo (mesmo sem Supabase configurado)
    service = CCTService()
    print(f"‚úì Servi√ßo CCT inicializado (Cliente Supabase: {'Dispon√≠vel' if service.client else 'N√£o dispon√≠vel'})")
    
    # Mostrar estrutura de dados para sindicato
    exemplo_sindicato = {
        "nome_sindicato": "Sindicato dos Trabalhadores no Com√©rcio de S√£o Paulo",
        "cnpj": "12.345.678/0001-99",
        "base_territorial": "S√£o Paulo - SP",
        "categoria_representada": "Trabalhadores no Com√©rcio de Bens, Servi√ßos e Turismo"
    }
    
    print("\n--- Estrutura de dados para Sindicato ---")
    print(json.dumps(exemplo_sindicato, indent=2, ensure_ascii=False))
    
    # Mostrar estrutura de dados para CCT
    exemplo_cct = {
        "sindicato_id": 1,
        "numero_registro_mte": "SP000123/2024",
        "vigencia_inicio": "2024-01-01",
        "vigencia_fim": "2024-12-31",
        "link_documento_oficial": "https://www.gov.br/trabalho/ccts/SP000123-2024.pdf",
        "dados_cct": {
            "resumo_executivo": "Aumento de 8% nos sal√°rios, novo piso de R$ 1.850,00 e vale-refei√ß√£o de R$ 25,00/dia.",
            "pisos_salariais": [
                {"cargo": "Auxiliar Administrativo", "valor": 1850.00},
                {"cargo": "T√©cnico", "valor": 2500.00},
                {"cargo": "Supervisor", "valor": 3200.00}
            ],
            "beneficios": {
                "vale_refeicao_dia": 25.00,
                "cesta_basica_mes": 150.00,
                "vale_transporte": True,
                "plano_saude_participacao": 0.15
            },
            "clausulas_importantes": [
                "Cl√°usula 3¬™ - Reajuste Salarial",
                "Cl√°usula 15¬™ - Benef√≠cio Social Familiar",
                "Cl√°usula 22¬™ - Jornada de Trabalho",
                "Cl√°usula 8¬™ - Vale Refei√ß√£o"
            ],
            "jornada_trabalho": {
                "horas_semanais": 44,
                "horas_diarias": 8,
                "intervalo_almoco_min": 60
            }
        }
    }
    
    print("\n--- Estrutura de dados para Conven√ß√£o Coletiva ---")
    print(json.dumps(exemplo_cct, indent=2, ensure_ascii=False))
    
    # Demonstrar chamadas da API (simuladas)
    print("\n--- Exemplos de chamadas da API ---")
    
    api_examples = [
        {
            "m√©todo": "POST",
            "endpoint": "/cct/sindicatos",
            "descri√ß√£o": "Criar novo sindicato",
            "dados": exemplo_sindicato
        },
        {
            "m√©todo": "GET",
            "endpoint": "/cct/sindicatos?limit=10&offset=0",
            "descri√ß√£o": "Listar sindicatos com pagina√ß√£o"
        },
        {
            "m√©todo": "GET",
            "endpoint": "/cct/sindicatos/1",
            "descri√ß√£o": "Obter sindicato espec√≠fico"
        },
        {
            "m√©todo": "POST",
            "endpoint": "/cct/",
            "descri√ß√£o": "Criar nova CCT",
            "dados": exemplo_cct
        },
        {
            "m√©todo": "GET", 
            "endpoint": "/cct/?union_id=1&limit=10",
            "descri√ß√£o": "Listar CCTs de um sindicato"
        },
        {
            "m√©todo": "POST",
            "endpoint": "/cct/empresas/1/sindicato/1",
            "descri√ß√£o": "Associar empresa ao sindicato"
        }
    ]
    
    for example in api_examples:
        print(f"\n{example['m√©todo']} {example['endpoint']}")
        print(f"  Descri√ß√£o: {example['descri√ß√£o']}")
        if 'dados' in example:
            print("  Dados de exemplo:")
            print("  " + json.dumps(example['dados'], indent=4, ensure_ascii=False).replace('\n', '\n  '))
    
    # Demonstrar estrutura da migra√ß√£o
    print("\n--- Migra√ß√£o de Base de Dados ---")
    print("‚úì Arquivo: migrations/007_modulo_cct_sindicatos.sql")
    print("‚úì Tabelas criadas: Sindicatos, ConvencoesColetivas")
    print("‚úì Coluna adicionada: sindicato_id em Empresas")
    print("‚úì Pol√≠ticas RLS implementadas")
    print("‚úì √çndices para performance criados")
    
    # Mostrar benef√≠cios
    print("\n--- Benef√≠cios do M√≥dulo CCT ---")
    benefits = [
        "üéØ Centraliza√ß√£o de informa√ß√µes das CCTs",
        "‚ö° Redu√ß√£o do tempo de pesquisa manual",
        "üîí Compliance autom√°tico com legisla√ß√£o trabalhista",
        "üìä Dados estrat√©gicos para contabilidades",
        "üõ°Ô∏è Seguran√ßa multi-tenant garantida",
        "üîÑ Estrutura flex√≠vel para diferentes tipos de CCT",
        "üìà Base para futuras funcionalidades de IA"
    ]
    
    for benefit in benefits:
        print(f"  {benefit}")
    
    print("\n=== FIM DA DEMONSTRA√á√ÉO ===")


def verificar_arquivos_criados():
    """
    Verifica se todos os arquivos necess√°rios foram criados
    """
    import os
    
    arquivos_verificar = [
        "migrations/007_modulo_cct_sindicatos.sql",
        "src/services/cct_service.py", 
        "src/api/routers/cct.py",
        "tests/test_cct_module.py",
        "docs/modulo_cct_documentacao.md"
    ]
    
    print("=== VERIFICA√á√ÉO DE ARQUIVOS ===\n")
    
    todos_existem = True
    for arquivo in arquivos_verificar:
        caminho_completo = f"/home/runner/work/AUDITORIA360/AUDITORIA360/{arquivo}"
        existe = os.path.exists(caminho_completo)
        status = "‚úì" if existe else "‚úó"
        print(f"{status} {arquivo}")
        
        if existe:
            # Mostrar tamanho do arquivo
            size = os.path.getsize(caminho_completo)
            print(f"    Tamanho: {size} bytes")
        else:
            todos_existem = False
    
    print(f"\n{'‚úì Todos os arquivos foram criados com sucesso!' if todos_existem else '‚úó Alguns arquivos est√£o em falta'}")
    return todos_existem


if __name__ == "__main__":
    print("VERIFICA√á√ÉO MANUAL DO M√ìDULO CCT\n")
    
    # Verificar arquivos
    verificar_arquivos_criados()
    print("\n" + "="*50 + "\n")
    
    # Demonstrar funcionalidades
    demonstrar_funcionalidades_cct()