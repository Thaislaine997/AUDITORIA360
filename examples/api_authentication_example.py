"""
Exemplo pr√°tico de uso da API de Autentica√ß√£o do AUDITORIA360.

Este exemplo demonstra:
- Login de usu√°rio
- Cria√ß√£o de usu√°rio
- Gest√£o de permiss√µes
- Prote√ß√£o de rotas com JWT

Requer: requests, python-dotenv
"""

from typing import Dict

import requests


class AuditAPI:
    """Cliente para interagir com a API do AUDITORIA360."""

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.token = None
        self.headers = {"Content-Type": "application/json"}

    def login(self, email: str, password: str) -> Dict:
        """
        Realiza login na API e armazena o token.

        Args:
            email: Email do usu√°rio
            password: Senha do usu√°rio

        Returns:
            dict: Resposta do login com token
        """
        url = f"{self.base_url}/api/v1/auth/login"
        data = {"email": email, "password": password}

        try:
            response = requests.post(url, json=data, headers=self.headers)
            response.raise_for_status()

            login_data = response.json()
            self.token = login_data.get("access_token")

            # Atualiza headers com token
            if self.token:
                self.headers["Authorization"] = f"Bearer {self.token}"

            print(f"‚úÖ Login realizado com sucesso para {email}")
            return login_data

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro no login: {e}")
            return {"error": str(e)}

    def get_user_profile(self) -> Dict:
        """
        Obt√©m o perfil do usu√°rio atual.

        Returns:
            dict: Dados do usu√°rio atual
        """
        if not self.token:
            return {"error": "Token n√£o encontrado. Fa√ßa login primeiro."}

        url = f"{self.base_url}/api/v1/auth/me"

        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()

            user_data = response.json()
            print(f"‚úÖ Perfil obtido: {user_data.get('name', 'N/A')}")
            return user_data

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao obter perfil: {e}")
            return {"error": str(e)}

    def create_user(self, user_data: Dict) -> Dict:
        """
        Cria um novo usu√°rio (requer permiss√µes de admin).

        Args:
            user_data: Dados do usu√°rio a ser criado

        Returns:
            dict: Resposta da cria√ß√£o do usu√°rio
        """
        if not self.token:
            return {"error": "Token n√£o encontrado. Fa√ßa login primeiro."}

        url = f"{self.base_url}/api/v1/auth/users"

        try:
            response = requests.post(url, json=user_data, headers=self.headers)
            response.raise_for_status()

            result = response.json()
            print(f"‚úÖ Usu√°rio criado: {user_data.get('email', 'N/A')}")
            return result

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao criar usu√°rio: {e}")
            return {"error": str(e)}

    def list_permissions(self) -> Dict:
        """
        Lista todas as permiss√µes dispon√≠veis.

        Returns:
            dict: Lista de permiss√µes
        """
        if not self.token:
            return {"error": "Token n√£o encontrado. Fa√ßa login primeiro."}

        url = f"{self.base_url}/api/v1/auth/permissions"

        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()

            permissions = response.json()
            print(f"‚úÖ Permiss√µes obtidas: {len(permissions)} encontradas")
            return permissions

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao listar permiss√µes: {e}")
            return {"error": str(e)}


def example_basic_authentication():
    """Exemplo b√°sico de autentica√ß√£o."""
    print("\nüîê === EXEMPLO DE AUTENTICA√á√ÉO B√ÅSICA ===")

    api = AuditAPI()

    # Exemplo de login
    login_result = api.login("admin@auditoria360.com", "admin123")

    if "access_token" in login_result:
        print(f"Token de acesso: {login_result['access_token'][:20]}...")
        print(f"Tipo de token: {login_result.get('token_type', 'Bearer')}")
        print(f"Expira em: {login_result.get('expires_in', 'N/A')} segundos")

        # Obter perfil do usu√°rio
        profile = api.get_user_profile()
        if "name" in profile:
            print(f"Usu√°rio logado: {profile['name']}")
            print(f"Email: {profile['email']}")
            print(f"Role: {profile.get('role', 'N/A')}")


def example_user_management():
    """Exemplo de gerenciamento de usu√°rios."""
    print("\nüë• === EXEMPLO DE GERENCIAMENTO DE USU√ÅRIOS ===")

    api = AuditAPI()

    # Login como admin
    api.login("admin@auditoria360.com", "admin123")

    # Criar novo usu√°rio
    new_user = {
        "name": "Jo√£o Silva",
        "email": "joao@exemplo.com",
        "password": "exemplo_senha_segura_123!",
        "role": "hr_user",
        "department": "RH",
        "is_active": True,
    }

    result = api.create_user(new_user)

    if "id" in result:
        print(f"Novo usu√°rio criado com ID: {result['id']}")
        print(f"Status: {'Ativo' if result.get('is_active') else 'Inativo'}")


def example_permissions_check():
    """Exemplo de verifica√ß√£o de permiss√µes."""
    print("\nüõ°Ô∏è === EXEMPLO DE VERIFICA√á√ÉO DE PERMISS√ïES ===")

    api = AuditAPI()
    api.login("admin@auditoria360.com", "admin123")

    # Listar permiss√µes
    permissions = api.list_permissions()

    if isinstance(permissions, list):
        print("\nPermiss√µes dispon√≠veis:")
        for perm in permissions[:5]:  # Mostrar apenas as primeiras 5
            print(f"- {perm.get('name', 'N/A')}: {perm.get('description', 'N/A')}")

        if len(permissions) > 5:
            print(f"... e mais {len(permissions) - 5} permiss√µes")


def example_error_handling():
    """Exemplo de tratamento de erros."""
    print("\n‚ö†Ô∏è === EXEMPLO DE TRATAMENTO DE ERROS ===")

    api = AuditAPI()

    # Tentar acessar recurso sem autentica√ß√£o
    profile = api.get_user_profile()
    print(f"Sem token: {profile}")

    # Login com credenciais inv√°lidas
    invalid_login = api.login("invalid@exemplo.com", "senha_errada")
    print(f"Login inv√°lido: {invalid_login}")

    # Tentar criar usu√°rio sem permiss√µes
    api.login("user@exemplo.com", "exemplo_senha_user")  # Login como usu√°rio comum

    user_data = {
        "name": "Teste",
        "email": "teste@exemplo.com",
        "password": "exemplo_senha_123!",
    }

    result = api.create_user(user_data)
    print(f"Cria√ß√£o sem permiss√£o: {result}")


def main():
    """Fun√ß√£o principal com todos os exemplos."""
    print("üöÄ EXEMPLOS DE USO - API DE AUTENTICA√á√ÉO AUDITORIA360")
    print("=" * 60)

    try:
        example_basic_authentication()
        example_user_management()
        example_permissions_check()
        example_error_handling()

        print("\n‚úÖ Todos os exemplos executados com sucesso!")
        print("\nüìö Para mais informa√ß√µes, consulte:")
        print("- Documenta√ß√£o da API: http://localhost:8000/docs")
        print("- Manual do usu√°rio: docs/usuario/manual-usuario.md")

    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("Verifique se a API est√° rodando em http://localhost:8000")


if __name__ == "__main__":
    main()
