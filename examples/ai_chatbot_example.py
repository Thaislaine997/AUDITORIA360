"""
Exemplo pr√°tico de uso da API de IA e Chatbot do AUDITORIA360.

Este exemplo demonstra:
- Intera√ß√£o com chatbot especializado
- Busca na base de conhecimento
- Gera√ß√£o de recomenda√ß√µes
- An√°lise de documentos com IA
- Treinamento do chatbot

Requer: requests, openai, python-dotenv
"""

import json
import requests
from typing import Dict, List, Optional


class ChatbotAPI:
    """Cliente para interagir com a API de IA e Chatbot."""
    
    def __init__(self, base_url: str = "http://localhost:8000", token: str = None):
        self.base_url = base_url
        self.token = token
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {token}" if token else ""
        }
    
    def chat(self, message: str, context: Optional[Dict] = None) -> Dict:
        """
        Conversa com o chatbot.
        
        Args:
            message: Mensagem do usu√°rio
            context: Contexto adicional (usu√°rio, sess√£o, etc.)
            
        Returns:
            dict: Resposta do chatbot
        """
        url = f"{self.base_url}/api/v1/ai/chat"
        
        data = {
            "message": message,
            "context": context or {},
            "use_knowledge_base": True,
            "include_sources": True
        }
        
        try:
            response = requests.post(url, json=data, headers=self.headers)
            response.raise_for_status()
            
            result = response.json()
            print(f"ü§ñ Chatbot respondeu:")
            print(f"Resposta: {result.get('response', 'N/A')}")
            
            if result.get('confidence'):
                print(f"Confian√ßa: {result['confidence']:.2f}")
            
            return result
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro no chat: {e}")
            return {"error": str(e)}
    
    def search_knowledge_base(self, query: str, limit: int = 5) -> List[Dict]:
        """
        Busca na base de conhecimento.
        
        Args:
            query: Termo de busca
            limit: N√∫mero m√°ximo de resultados
            
        Returns:
            list: Resultados da busca
        """
        url = f"{self.base_url}/api/v1/ai/knowledge-base/search"
        params = {"q": query, "limit": limit}
        
        try:
            response = requests.get(url, params=params, headers=self.headers)
            response.raise_for_status()
            
            results = response.json()
            print(f"üîç Busca na base de conhecimento:")
            print(f"Encontrados: {len(results)} resultados")
            
            return results
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na busca: {e}")
            return []
    
    def get_recommendations(self, context: Dict) -> List[Dict]:
        """
        Obt√©m recomenda√ß√µes personalizadas.
        
        Args:
            context: Contexto do usu√°rio/situa√ß√£o
            
        Returns:
            list: Lista de recomenda√ß√µes
        """
        url = f"{self.base_url}/api/v1/ai/recommendations"
        
        try:
            response = requests.post(url, json=context, headers=self.headers)
            response.raise_for_status()
            
            recommendations = response.json()
            print(f"üí° Recomenda√ß√µes obtidas: {len(recommendations)}")
            
            return recommendations
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao obter recomenda√ß√µes: {e}")
            return []
    
    def analyze_document(self, document_id: int, analysis_type: str = "general") -> Dict:
        """
        Analisa documento com IA.
        
        Args:
            document_id: ID do documento
            analysis_type: Tipo de an√°lise (general, compliance, payroll, etc.)
            
        Returns:
            dict: Resultado da an√°lise
        """
        url = f"{self.base_url}/api/v1/ai/analyze-document"
        
        data = {
            "document_id": document_id,
            "analysis_type": analysis_type,
            "include_suggestions": True
        }
        
        try:
            response = requests.post(url, json=data, headers=self.headers)
            response.raise_for_status()
            
            result = response.json()
            print(f"üìÑ An√°lise de documento conclu√≠da:")
            print(f"Tipo: {analysis_type}")
            print(f"Confian√ßa: {result.get('confidence', 0):.2f}")
            
            return result
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na an√°lise: {e}")
            return {"error": str(e)}


def example_basic_chat():
    """Exemplo b√°sico de conversa com chatbot."""
    print("\nüí¨ === EXEMPLO DE CHAT B√ÅSICO ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Conversas de exemplo
    conversations = [
        "Como calcular o INSS sobre o sal√°rio?",
        "Qual √© o prazo para entregar a DIRF?",
        "Quais s√£o as principais mudan√ßas na CLT em 2024?",
        "Como funciona o c√°lculo de f√©rias?",
        "O que √© necess√°rio para demitir um funcion√°rio?"
    ]
    
    chat_session = {
        "session_id": "demo_session_001",
        "user_id": "user_123",
        "user_role": "hr_manager"
    }
    
    for i, message in enumerate(conversations, 1):
        print(f"\n--- Pergunta {i} ---")
        print(f"üë§ Usu√°rio: {message}")
        
        response = api.chat(message, context=chat_session)
        
        if "response" in response:
            # Mostrar resposta
            bot_response = response["response"]
            if len(bot_response) > 200:
                bot_response = bot_response[:200] + "..."
            
            print(f"ü§ñ Bot: {bot_response}")
            
            # Mostrar fontes se dispon√≠veis
            if response.get("sources"):
                print(f"üìö Fontes consultadas:")
                for source in response["sources"][:2]:
                    print(f"- {source.get('title', 'N/A')}")
            
            # Mostrar sugest√µes de perguntas relacionadas
            if response.get("related_questions"):
                print(f"‚ùì Perguntas relacionadas:")
                for question in response["related_questions"][:2]:
                    print(f"- {question}")


def example_knowledge_base_search():
    """Exemplo de busca na base de conhecimento."""
    print("\nüîç === EXEMPLO DE BUSCA NA BASE DE CONHECIMENTO ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Diferentes tipos de busca
    search_queries = [
        "c√°lculo de impostos folha de pagamento",
        "conven√ß√£o coletiva reajuste salarial",
        "procedimentos admiss√£o funcion√°rio",
        "obriga√ß√µes fiscais empresa",
        "direitos trabalhistas f√©rias"
    ]
    
    for query in search_queries:
        print(f"\nüîé Buscando: '{query}'")
        
        results = api.search_knowledge_base(query, limit=3)
        
        for i, result in enumerate(results, 1):
            print(f"\n{i}. {result.get('title', 'N/A')}")
            print(f"   Categoria: {result.get('category', 'N/A')}")
            print(f"   Relev√¢ncia: {result.get('relevance_score', 0):.2f}")
            
            # Mostrar snippet do conte√∫do
            content = result.get('content', '')
            if content and len(content) > 150:
                content = content[:150] + "..."
            print(f"   Conte√∫do: {content}")


def example_personalized_recommendations():
    """Exemplo de recomenda√ß√µes personalizadas."""
    print("\nüí° === EXEMPLO DE RECOMENDA√á√ïES PERSONALIZADAS ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Diferentes contextos de usu√°rio
    user_contexts = [
        {
            "user_role": "hr_manager",
            "company_size": "medium",
            "industry": "technology",
            "current_issues": ["high_turnover", "payroll_errors"],
            "priority": "compliance"
        },
        {
            "user_role": "accountant",
            "company_size": "small",
            "industry": "retail",
            "current_issues": ["tax_deadlines", "cost_reduction"],
            "priority": "automation"
        },
        {
            "user_role": "ceo",
            "company_size": "large",
            "industry": "manufacturing",
            "current_issues": ["digital_transformation", "audit_preparation"],
            "priority": "strategic"
        }
    ]
    
    for i, context in enumerate(user_contexts, 1):
        print(f"\n--- Recomenda√ß√µes para Usu√°rio {i} ---")
        print(f"Perfil: {context['user_role']} - {context['industry']}")
        print(f"Problemas atuais: {', '.join(context['current_issues'])}")
        
        recommendations = api.get_recommendations(context)
        
        for j, rec in enumerate(recommendations[:3], 1):
            print(f"\n{j}. {rec.get('title', 'N/A')}")
            print(f"   Prioridade: {rec.get('priority', 'N/A')}")
            print(f"   Impacto estimado: {rec.get('impact_score', 0):.1f}/10")
            print(f"   Esfor√ßo: {rec.get('effort_level', 'N/A')}")
            
            description = rec.get('description', '')
            if len(description) > 100:
                description = description[:100] + "..."
            print(f"   Descri√ß√£o: {description}")


def example_document_analysis():
    """Exemplo de an√°lise de documentos com IA."""
    print("\nüìÑ === EXEMPLO DE AN√ÅLISE DE DOCUMENTOS ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Diferentes tipos de an√°lise
    analysis_scenarios = [
        {
            "document_id": 1,
            "analysis_type": "payroll_compliance",
            "description": "An√°lise de conformidade em demonstrativo de pagamento"
        },
        {
            "document_id": 2,
            "analysis_type": "contract_review",
            "description": "Revis√£o de contrato de trabalho"
        },
        {
            "document_id": 3,
            "analysis_type": "cct_comparison",
            "description": "Compara√ß√£o de conven√ß√£o coletiva"
        }
    ]
    
    for scenario in analysis_scenarios:
        print(f"\nüìã {scenario['description']}")
        
        result = api.analyze_document(
            document_id=scenario["document_id"],
            analysis_type=scenario["analysis_type"]
        )
        
        if "analysis_result" in result:
            analysis = result["analysis_result"]
            
            print(f"‚úÖ Status: {analysis.get('status', 'N/A')}")
            print(f"üìä Score de conformidade: {analysis.get('compliance_score', 0):.1f}/10")
            
            # Mostrar achados principais
            if analysis.get("findings"):
                print(f"\nüîç Principais achados:")
                for finding in analysis["findings"][:3]:
                    severity = finding.get("severity", "info").upper()
                    print(f"- [{severity}] {finding.get('description', 'N/A')}")
            
            # Mostrar sugest√µes
            if analysis.get("suggestions"):
                print(f"\nüí° Sugest√µes de melhoria:")
                for suggestion in analysis["suggestions"][:2]:
                    print(f"- {suggestion.get('action', 'N/A')}")
                    print(f"  Impacto: {suggestion.get('impact', 'N/A')}")


def example_chatbot_training():
    """Exemplo de treinamento e feedback do chatbot."""
    print("\nüéì === EXEMPLO DE TREINAMENTO DO CHATBOT ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Adicionar feedback para melhorar respostas
    feedback_data = [
        {
            "conversation_id": "conv_001",
            "user_question": "Como calcular f√©rias?",
            "bot_response": "Para calcular f√©rias...",
            "user_rating": 5,
            "user_feedback": "Resposta muito clara e completa",
            "suggested_improvement": None
        },
        {
            "conversation_id": "conv_002",
            "user_question": "Prazo para DIRF",
            "bot_response": "A DIRF deve ser entregue...",
            "user_rating": 3,
            "user_feedback": "Faltou mencionar as multas por atraso",
            "suggested_improvement": "Incluir informa√ß√µes sobre penalidades"
        }
    ]
    
    feedback_url = f"{api.base_url}/api/v1/ai/feedback"
    
    for feedback in feedback_data:
        print(f"\nüìù Enviando feedback para: {feedback['user_question']}")
        
        try:
            response = requests.post(feedback_url, json=feedback, headers=api.headers)
            response.raise_for_status()
            
            result = response.json()
            print(f"‚úÖ Feedback registrado: ID {result.get('feedback_id', 'N/A')}")
            
            if result.get("training_triggered"):
                print(f"üéØ Treinamento do modelo agendado")
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao enviar feedback: {e}")
    
    # Adicionar novo conhecimento √† base
    new_knowledge = {
        "title": "C√°lculo de Adicional Noturno 2024",
        "content": """
        O adicional noturno √© de no m√≠nimo 20% sobre a hora diurna.
        
        Hor√°rio noturno:
        - Urbano: 22h √†s 5h (hora reduzida de 52min30s)
        - Rural: 21h √†s 5h (agricultura) ou 20h √†s 4h (pecu√°ria)
        
        C√°lculo:
        Valor da hora normal √ó 1,20 √ó n√∫mero de horas noturnas
        """,
        "category": "payroll_calculations",
        "tags": ["adicional_noturno", "calculo_folha", "legislacao_2024"],
        "source": "CLT Art. 73",
        "last_updated": "2024-01-15"
    }
    
    knowledge_url = f"{api.base_url}/api/v1/ai/knowledge-base"
    
    try:
        response = requests.post(knowledge_url, json=new_knowledge, headers=api.headers)
        response.raise_for_status()
        
        result = response.json()
        print(f"\nüìö Conhecimento adicionado √† base:")
        print(f"ID: {result.get('knowledge_id', 'N/A')}")
        print(f"Categoria: {new_knowledge['category']}")
        print(f"Tags: {', '.join(new_knowledge['tags'])}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao adicionar conhecimento: {e}")


def example_advanced_chat_features():
    """Exemplo de recursos avan√ßados do chatbot."""
    print("\nüöÄ === RECURSOS AVAN√áADOS DO CHATBOT ===")
    
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    api = ChatbotAPI(token=token)
    
    # Chat com an√°lise de sentimento e inten√ß√£o
    advanced_context = {
        "session_id": "advanced_demo",
        "user_id": "power_user",
        "enable_sentiment_analysis": True,
        "enable_intent_detection": True,
        "preferred_response_style": "detailed",
        "user_expertise_level": "intermediate"
    }
    
    complex_questions = [
        "Estou preocupado com uma poss√≠vel auditoria fiscal, o que devo verificar na folha de pagamento?",
        "Nossa empresa est√° crescendo r√°pido, que controles internos voc√™ recomenda para RH?",
        "Preciso urgentemente calcular rescis√£o de um funcion√°rio com 5 anos de empresa",
    ]
    
    for question in complex_questions:
        print(f"\nüí≠ Pergunta complexa:")
        print(f"'{question}'")
        
        response = api.chat(question, context=advanced_context)
        
        if "response" in response:
            print(f"\nü§ñ Resposta:")
            bot_response = response["response"]
            if len(bot_response) > 300:
                bot_response = bot_response[:300] + "..."
            print(bot_response)
            
            # An√°lise de sentimento
            if response.get("sentiment_analysis"):
                sentiment = response["sentiment_analysis"]
                print(f"\nüòä Sentimento detectado: {sentiment.get('emotion', 'N/A')}")
                print(f"Urg√™ncia: {sentiment.get('urgency_level', 'N/A')}")
            
            # Inten√ß√£o detectada
            if response.get("intent_analysis"):
                intent = response["intent_analysis"]
                print(f"üéØ Inten√ß√£o: {intent.get('primary_intent', 'N/A')}")
                print(f"Confian√ßa: {intent.get('confidence', 0):.2f}")
            
            # A√ß√µes sugeridas
            if response.get("suggested_actions"):
                print(f"\n‚úÖ A√ß√µes sugeridas:")
                for action in response["suggested_actions"][:2]:
                    print(f"- {action.get('description', 'N/A')}")
                    print(f"  Prioridade: {action.get('priority', 'N/A')}")


def main():
    """Fun√ß√£o principal com todos os exemplos."""
    print("ü§ñ EXEMPLOS DE USO - API DE IA E CHATBOT AUDITORIA360")
    print("=" * 65)
    
    try:
        example_basic_chat()
        example_knowledge_base_search()
        example_personalized_recommendations()
        example_document_analysis()
        example_chatbot_training()
        example_advanced_chat_features()
        
        print("\n‚úÖ Todos os exemplos executados com sucesso!")
        print("\nüìö Para mais informa√ß√µes, consulte:")
        print("- Documenta√ß√£o da API: http://localhost:8000/docs")
        print("- Manual de IA: docs/tecnico/ai-chatbot-guide.md")
        print("- Base de conhecimento: docs/knowledge-base/")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("Verifique se a API est√° rodando e o token √© v√°lido")


if __name__ == "__main__":
    main()