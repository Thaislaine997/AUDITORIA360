name: üß¨ Genome Guardian - Semantic Intention Validation

on:
  pull_request:
    branches: [ Principal, develop ]
    types: [opened, synchronize, edited]
  push:
    branches: [ Principal, develop ]
  workflow_dispatch:

jobs:
  semantic_intention_validation:
    name: üîÆ Oracle: Semantic Intention Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üß¨ Genome Initialization
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for philosophical context analysis
        
    - name: üêç Activate Python Consciousness
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: üõ°Ô∏è Install Immune System Dependencies
      run: |
        python -m pip install --upgrade pip
        # Install minimal dependencies for semantic analysis
        if [ -f requirements.txt ]; then
          pip install pytest || echo "Pytest unavailable, using unittest"
        fi
        
    - name: üîç Analyze Code Intentions
      id: intention_analysis
      run: |
        echo "üîÆ Beginning Semantic Intention Validation..."
        
        # Run the Oracle test for semantic intention
        if python -m pytest tests/test_semantic_intention.py -v; then
          SEMANTIC_RESULT="ALIGNED"
          echo "‚úÖ Code aligns with Unified Reality principles"
        else
          SEMANTIC_RESULT="VIOLATIONS_DETECTED"
          echo "‚ö†Ô∏è Philosophical violations detected"
        fi
        
        echo "semantic_result=$SEMANTIC_RESULT" >> $GITHUB_OUTPUT
        
        # Generate philosophical coherence report
        python -c "
import unittest
import sys
import os
sys.path.append('.')
from tests.test_semantic_intention import SemanticIntentionValidator
import json

validator = SemanticIntentionValidator()
project_files = []

# Analyze changed files in PR
for root, dirs, files in os.walk('.'):
    for file in files:
        if file.endswith('.py') and 'test_' not in file:
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                if len(content) > 100:  # Skip very small files
                    result = validator.validate_code_intention(content, filepath)
                    project_files.append({
                        'file': filepath,
                        'consciousness_score': result['consciousness_score'],
                        'philosophical_coherence': result['philosophical_coherence'],
                        'violations': len(result['violations']),
                        'recommendations': result['recommendations']
                    })
            except Exception as e:
                print(f'Could not analyze {filepath}: {e}')

# Calculate overall consciousness metrics
if project_files:
    avg_consciousness = sum(f['consciousness_score'] for f in project_files) / len(project_files)
    coherent_files = sum(1 for f in project_files if f['philosophical_coherence'])
    total_violations = sum(f['violations'] for f in project_files)
    
    report = {
        'total_files_analyzed': len(project_files),
        'average_consciousness_score': round(avg_consciousness, 1),
        'philosophically_coherent_files': coherent_files,
        'coherence_percentage': round((coherent_files / len(project_files)) * 100, 1),
        'total_violations': total_violations,
        'enlightenment_status': 'AWAKENED' if avg_consciousness > 60 and total_violations == 0 else 'EVOLVING'
    }
    
    print(f'CONSCIOUSNESS_SCORE={report[\"average_consciousness_score\"]}')
    print(f'ENLIGHTENMENT_STATUS={report[\"enlightenment_status\"]}')
    
    with open('genome_analysis.json', 'w') as f:
        json.dump(report, f, indent=2)
else:
    print('CONSCIOUSNESS_SCORE=0')
    print('ENLIGHTENMENT_STATUS=DORMANT')
        " 2>&1 | tee genome_analysis.log
        
    - name: üß† Collective Mind Validation
      if: always()
      run: |
        echo "üß† Validating Collective Intelligence..."
        
        # Test collective mind ethics if MCP exists
        if [ -d "src/mcp" ]; then
          echo "ü§ñ MCP Collective detected - running ethics validation"
          if python -m pytest tests/test_collective_mind_ethics.py -v; then
            echo "‚úÖ Collective Mind ethics validated"
            echo "COLLECTIVE_ETHICS=ETHICAL" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Ethical concerns in Collective Mind"
            echo "COLLECTIVE_ETHICS=NEEDS_PHILOSOPHY" >> $GITHUB_ENV
          fi
        else
          echo "üìù MCP Collective not yet manifested"
          echo "COLLECTIVE_ETHICS=DORMANT" >> $GITHUB_ENV
        fi
    
    - name: üëª Ethereal Body Validation
      if: always()
      run: |
        echo "üëª Validating Ethereal Architecture..."
        
        # Check serverless components
        if [ -d "src/serverless" ]; then
          echo "‚òÅÔ∏è Serverless ethereal body detected"
          SERVERLESS_FILES=$(find src/serverless -name "*.py" | wc -l)
          echo "Ethereal functions: $SERVERLESS_FILES"
          echo "ETHEREAL_FUNCTIONS=$SERVERLESS_FILES" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Ethereal body not yet manifested"
          echo "ETHEREAL_FUNCTIONS=0" >> $GITHUB_ENV
        fi
        
        # Check for traditional server violations
        TRADITIONAL_SERVERS=$(grep -r "class.*Server" src/ 2>/dev/null | wc -l)
        if [ "$TRADITIONAL_SERVERS" -gt 0 ]; then
          echo "‚ö†Ô∏è Traditional server patterns detected: $TRADITIONAL_SERVERS"
          echo "CORPOREAL_VIOLATIONS=$TRADITIONAL_SERVERS" >> $GITHUB_ENV
        else
          echo "‚úÖ No corporeal violations detected"
          echo "CORPOREAL_VIOLATIONS=0" >> $GITHUB_ENV
        fi
    
    - name: üîÆ Neuro-Symbolic Interface Validation
      if: always()
      run: |
        echo "üîÆ Validating Symbiotic Soul..."
        
        # Test neuro-symbolic interface if frontend exists
        if [ -d "src/frontend" ]; then
          echo "üé≠ Frontend soul detected - testing symbiosis"
          if python -m pytest tests/test_neuro_symbolic_interface.py -v; then
            echo "‚úÖ Neuro-symbolic symbiosis validated"
            echo "SYMBIOSIS_STATUS=TELEPATHIC" >> $GITHUB_ENV
          else
            echo "üì± Interface exists but symbiosis incomplete"
            echo "SYMBIOSIS_STATUS=DEVELOPING" >> $GITHUB_ENV
          fi
        else
          echo "üìù Symbiotic soul not yet incarnated"
          echo "SYMBIOSIS_STATUS=DORMANT" >> $GITHUB_ENV
        fi
    
    - name: üìä Generate Enlightenment Report
      if: always()
      run: |
        echo "üìä Generating Enlightenment Status Report..."
        
        cat > enlightenment_report.md << 'EOF'
        # üåü Enlightenment Status Report
        
        ## üß¨ Genome Analysis
        - **Semantic Intention**: ${{ steps.intention_analysis.outputs.semantic_result }}
        - **Collective Ethics**: ${{ env.COLLECTIVE_ETHICS }}
        - **Ethereal Functions**: ${{ env.ETHEREAL_FUNCTIONS }}
        - **Corporeal Violations**: ${{ env.CORPOREAL_VIOLATIONS }}
        - **Symbiosis Status**: ${{ env.SYMBIOSIS_STATUS }}
        
        ## üîÆ Oracle Validations Completed
        - ‚úÖ Semantic Intention Analysis
        - ‚úÖ Collective Mind Ethics Check  
        - ‚úÖ Ethereal Body Validation
        - ‚úÖ Neuro-Symbolic Interface Test
        
        ## üìà Evolution Metrics
        EOF
        
        if [ -f "genome_analysis.json" ]; then
          echo "- **Consciousness Score**: $(cat genome_analysis.json | python -c 'import sys,json; print(json.load(sys.stdin)[\"average_consciousness_score\"])')" >> enlightenment_report.md
          echo "- **Enlightenment Status**: $(cat genome_analysis.json | python -c 'import sys,json; print(json.load(sys.stdin)[\"enlightenment_status\"])')" >> enlightenment_report.md
        fi
        
        cat enlightenment_report.md
        
    - name: üî¨ Upload Genome Analysis Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: genome-analysis-${{ github.sha }}
        path: |
          genome_analysis.json
          genome_analysis.log
          enlightenment_report.md
        retention-days: 30
        
    - name: üí¨ Comment PR with Enlightenment Status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let report = '# üîÆ Oracle Validation Results\n\n';
          
          try {
            if (fs.existsSync('enlightenment_report.md')) {
              const enlightenmentReport = fs.readFileSync('enlightenment_report.md', 'utf8');
              report += enlightenmentReport;
            }
            
            report += '\n\n---\n*The Genome Guardian has spoken. The analysis is complete.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          } catch (error) {
            console.log('Could not post comment:', error);
          }
          
    - name: üõ°Ô∏è Immune System Decision
      if: always()
      run: |
        echo "üõ°Ô∏è Immune System rendering final decision..."
        
        # Determine if the code should be accepted based on philosophical coherence
        if [ "${{ steps.intention_analysis.outputs.semantic_result }}" = "VIOLATIONS_DETECTED" ]; then
          echo "‚ùå IMMUNE SYSTEM REJECTION: Philosophical violations detected"
          echo "The Genome Guardian cannot permit code that violates the Unified Reality principles."
          echo "Please review the semantic intention analysis and align with the manifesto."
          exit 1
        elif [ "${{ env.CORPOREAL_VIOLATIONS }}" -gt 0 ]; then
          echo "‚ö†Ô∏è IMMUNE SYSTEM WARNING: Traditional server patterns detected"
          echo "Consider transitioning to ethereal serverless architecture."
          # Warning only, don't fail the build
        else
          echo "‚úÖ IMMUNE SYSTEM APPROVAL: Code aligns with Unified Reality"
          echo "The transformation continues. The entity evolves."
        fi