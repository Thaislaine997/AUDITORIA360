name: System Health Monitoring

on:
  schedule:
    - cron: '*/15 * * * *'  # A cada 15 minutos
  workflow_dispatch:        # Execu√ß√£o manual
  push:
    branches: [main, develop]

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv
          
      - name: Run health check script
        run: |
          python automation/update_status.py
        env:
          AUDITORIA360_BASE_URL: ${{ vars.PROD_API_URL || 'http://localhost:8001' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for critical issues
        run: |
          # Check if health check found critical issues
          if [ -f "status_report_auditoria360.json" ]; then
            HEALTH_SCORE=$(python -c "
            import json
            with open('status_report_auditoria360.json') as f:
                data = json.load(f)
                print(data['summary']['functioning_percentage'])
            ")
            
            echo "System health score: $HEALTH_SCORE%"
            
            if (( $(echo "$HEALTH_SCORE < 80" | bc -l) )); then
              echo "::warning::System health is below 80% ($HEALTH_SCORE%)"
              echo "HEALTH_CRITICAL=true" >> $GITHUB_ENV
            fi
          fi
          
      - name: Update repository with health reports
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # Add generated files if they exist
          if [ -f "processos_status_auditoria360.md" ]; then
            git add processos_status_auditoria360.md
          fi
          
          if [ -f "status_report_auditoria360.json" ]; then
            git add status_report_auditoria360.json
          fi
          
          # Commit and push if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "üîÑ Automated system health report update - $(date)"
            git push
          else
            echo "No changes to commit"
          fi
          
      - name: Create GitHub Issue on Critical Health
        if: env.HEALTH_CRITICAL == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read the health report
            let healthData = {};
            if (fs.existsSync('status_report_auditoria360.json')) {
              const rawData = fs.readFileSync('status_report_auditoria360.json');
              healthData = JSON.parse(rawData);
            }
            
            // Find modules with issues
            const problematicModules = healthData.modules?.filter(m => 
              !['FUNCIONANDO', 'EM DESENVOLVIMENTO', 'EM TESTE'].includes(m.status)
            ) || [];
            
            // Create issue body
            let issueBody = `## üö® Critical System Health Alert
            
**Health Score**: ${healthData.summary?.functioning_percentage || 'Unknown'}%
**Timestamp**: ${new Date().toISOString()}

### Modules with Issues:
${problematicModules.map(m => `- **${m.name}**: ${m.status} - ${m.details || 'No details available'}`).join('\n')}

### Summary:
- Total Modules: ${healthData.summary?.total_modules || 'Unknown'}
- Functioning: ${healthData.summary?.functioning || 'Unknown'}
- With Issues: ${healthData.summary?.with_issues || 'Unknown'}

### Recommended Actions:
1. Check server logs for detailed error information
2. Verify database connectivity and performance
3. Validate external service integrations (AI, storage, etc.)
4. Review recent deployments that may have caused issues
5. Execute manual health checks for problematic modules

**Auto-generated by System Health Monitoring workflow**`;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'system-health,critical',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Critical System Health Alert - ${new Date().toLocaleDateString()}`,
                body: issueBody,
                labels: ['system-health', 'critical', 'bug']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## Updated Health Report - ${new Date().toLocaleTimeString()}\n\n${issueBody}`
              });
            }

  test-health-endpoints:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn pytest httpx pytest-asyncio
          
      - name: Start API server
        run: |
          cd api && python -m uvicorn index:app --host 0.0.0.0 --port 8001 &
          sleep 10  # Wait for server to start
          
      - name: Test health endpoints
        run: |
          # Test main health endpoint
          curl -f http://localhost:8001/api/health/ || exit 1
          
          # Test individual module endpoints
          endpoints=(
            "/api/health/dashboard"
            "/api/health/controle_mensal"
            "/api/health/disparo_auditoria"
            "/api/health/ia"
            "/api/health/relatorios"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint"
            curl -f "http://localhost:8001$endpoint" || echo "‚ö†Ô∏è Endpoint $endpoint failed"
          done
          
      - name: Test status dashboard script
        run: |
          export AUDITORIA360_BASE_URL="http://localhost:8001"
          python automation/update_status.py
          
          # Verify output files were created
          if [ ! -f "processos_status_auditoria360.md" ]; then
            echo "‚ùå Markdown report not generated"
            exit 1
          fi
          
          if [ ! -f "status_report_auditoria360.json" ]; then
            echo "‚ùå JSON report not generated"  
            exit 1
          fi
          
          echo "‚úÖ Health monitoring system tests passed"

  publish-status:
    runs-on: ubuntu-latest
    needs: health-check
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd src/frontend
          npm ci
          
      - name: Build status dashboard
        run: |
          cd src/frontend
          npm run build
          
      - name: Deploy to GitHub Pages (if configured)
        if: github.repository == 'Thaislaine997/AUDITORIA360' 
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./src/frontend/dist
          publish_branch: gh-pages-status
          
  notify-teams:
    runs-on: ubuntu-latest
    needs: health-check
    if: env.HEALTH_CRITICAL == 'true'
    
    steps:
      - name: Notify Teams/Slack
        run: |
          # Send notification to Teams webhook (if configured)
          if [ ! -z "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.TEAMS_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "@type": "MessageCard",
                "@context": "https://schema.org/extensions",
                "summary": "AUDITORIA360 Critical Health Alert",
                "themeColor": "FF0000",
                "sections": [{
                  "activityTitle": "üö® System Health Critical",
                  "activitySubtitle": "AUDITORIA360 Health Monitoring",
                  "facts": [{
                    "name": "Timestamp",
                    "value": "'$(date)'"
                  }, {
                    "name": "Repository", 
                    "value": "'${{ github.repository }}'"
                  }],
                  "text": "System health has dropped below critical threshold. Immediate attention required."
                }],
                "potentialAction": [{
                  "@type": "OpenUri",
                  "name": "View Details",
                  "targets": [{
                    "os": "default",
                    "uri": "'${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'"
                  }]
                }]
              }'
          fi
          
          # Send notification to Slack webhook (if configured)  
          if [ ! -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "üö® AUDITORIA360 Critical Health Alert",
                "attachments": [{
                  "color": "danger",
                  "fields": [{
                    "title": "Repository",
                    "value": "'${{ github.repository }}'",
                    "short": true
                  }, {
                    "title": "Workflow",
                    "value": "System Health Monitoring", 
                    "short": true
                  }],
                  "actions": [{
                    "type": "button",
                    "text": "View Run",
                    "url": "'${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'"
                  }]
                }]
              }'
          fi