name: CI - AUDITORIA360

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Instalar ferramentas de linting e segurança
        run: |
          python -m pip install --upgrade pip
          pip install flake8 safety bandit black isort
          
      - name: Verificar formatação com Black
        run: black --check --diff .
        continue-on-error: true
        
      - name: Verificar imports com isort
        run: isort --check-only --diff .
        continue-on-error: true
        
      - name: Linting com flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true
        
      - name: Verificação de segurança com bandit
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Instalar dependências de verificação
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          
      - name: Verificar vulnerabilidades com safety
        run: safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Audit com pip-audit
        run: pip-audit --desc --format=json --output=pip-audit-report.json
        continue-on-error: true
        
      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json

  build-and-test:
    runs-on: ubuntu-latest
    needs: [lint-and-security, dependency-check]
    strategy:
      matrix:
        test-group: [unit, integration]
        
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev libffi-dev shared-mime-info
          
      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --timeout=300 --retries=3
        timeout-minutes: 15
        
      - name: Configurar variáveis de ambiente para testes
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/fake-credentials.json" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_PROJECT=test-project" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=test-project" >> $GITHUB_ENV
          
      - name: Rodar testes unitários
        if: matrix.test-group == 'unit'
        run: |
          pytest tests/ -m "unit or not integration" \
            --maxfail=5 \
            --disable-warnings \
            --tb=short \
            --cov=services \
            --cov=dashboards \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results-unit.xml
            
      - name: Rodar testes de integração
        if: matrix.test-group == 'integration'
        run: |
          pytest tests/ -m "integration" \
            --maxfail=3 \
            --disable-warnings \
            --tb=short \
            --junitxml=test-results-integration.xml
        continue-on-error: true
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.test-group == 'unit'
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            test-results-*.xml
            htmlcov/
            coverage.xml

  test-summary:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts
          
      - name: Generate test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Group | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test-artifacts/test-results-unit/test-results-unit.xml" ]; then
            echo "| Unit Tests | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "test-artifacts/test-results-integration/test-results-integration.xml" ]; then
            echo "| Integration Tests | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ⚠️ Failed or Skipped |" >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Deploy to Cloud Run
        run: bash deploy/cloudrun_deploy.sh
