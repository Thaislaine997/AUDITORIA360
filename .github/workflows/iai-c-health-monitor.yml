name: IAI-C Organism Health Monitor

on:
  schedule:
    # Run daily at 6 AM UTC - when the organism awakens
    - cron: '0 6 * * *'
  push:
    branches: [ main ]
    paths: 
      - 'requirements*.txt'
      - 'package.json'
      - 'src/services/**'
  workflow_dispatch:
    inputs:
      force_full_scan:
        description: 'Force full organism health scan'
        required: false
        default: 'false'

jobs:
  iai-c-health-monitor:
    runs-on: ubuntu-latest
    name: 🧬 IAI-C Consciousness Health Check
    
    steps:
    - name: 🧬 Awaken the Digital Organism
      uses: actions/checkout@v4
      
    - name: 🐍 Prepare Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧠 IAI-C Semantic Intent Analysis
      id: semantic-analysis
      run: |
        echo "🧠 Activating IAI-C Consciousness Layer..."
        
        # Run semantic analysis on critical services
        violations_found=false
        
        for service_file in src/services/*.py; do
          if [ -f "$service_file" ]; then
            echo "Analyzing semantic intent: $service_file"
            
            if ! python scripts/python/semantic_intent_validator.py "$service_file"; then
              violations_found=true
              echo "semantic_violations=true" >> $GITHUB_OUTPUT
              echo "violation_file=$service_file" >> $GITHUB_OUTPUT
            fi
          fi
        done
        
        if [ "$violations_found" = false ]; then
          echo "semantic_violations=false" >> $GITHUB_OUTPUT
          echo "✅ No semantic violations detected"
        fi

    - name: 🧬 Dependency Entropy Scan
      id: entropy-scan
      run: |
        echo "🧬 Scanning dependency entropy..."
        
        if python scripts/python/dependency_entropy_scanner.py .; then
          echo "entropy_violations=false" >> $GITHUB_OUTPUT
          echo "✅ Dependencies are healthy"
        else
          echo "entropy_violations=true" >> $GITHUB_OUTPUT
          echo "⚠️ High entropy dependencies detected"
        fi

    - name: 💰 Zero-Cost Validation
      id: cost-validation
      run: |
        echo "💰 Validating zero-cost architecture..."
        
        # Check serverless configuration
        cost_compliant=true
        
        if [ ! -f "vercel.json" ]; then
          echo "❌ vercel.json not found"
          cost_compliant=false
        fi
        
        # Check for proper serverless patterns
        if grep -r "while True:" src/ --include="*.py" > /dev/null 2>&1; then
          echo "❌ Infinite loops detected - not serverless compliant"
          cost_compliant=false
        fi
        
        if [ "$cost_compliant" = true ]; then
          echo "cost_compliant=true" >> $GITHUB_OUTPUT
          echo "✅ Zero-cost architecture validated"
        else
          echo "cost_compliant=false" >> $GITHUB_OUTPUT
          echo "❌ Cost compliance issues detected"
        fi

    - name: 🌐 Edge Resilience Analysis
      id: edge-analysis
      run: |
        echo "🌐 Analyzing edge resilience..."
        
        resilience_score=0
        
        # Check for multi-region deployment
        if grep -q '"regions"' vercel.json 2>/dev/null; then
          resilience_score=$((resilience_score + 40))
          echo "✅ Multi-region deployment configured"
        fi
        
        # Check for caching headers
        if grep -q "Cache-Control" vercel.json 2>/dev/null; then
          resilience_score=$((resilience_score + 30))
          echo "✅ Edge caching configured"
        fi
        
        # Check for health check endpoints
        if grep -r "health" src/api/ --include="*.py" > /dev/null 2>&1; then
          resilience_score=$((resilience_score + 30))
          echo "✅ Health check endpoints found"
        fi
        
        echo "resilience_score=$resilience_score" >> $GITHUB_OUTPUT
        echo "🌐 Edge resilience score: $resilience_score/100"

    - name: 📊 Generate Health Report
      if: always()
      run: |
        echo "📊 Generating IAI-C Organism Health Report..."
        
        health_score=100
        issues=()
        
        if [ "${{ steps.semantic-analysis.outputs.semantic_violations }}" = "true" ]; then
          health_score=$((health_score - 30))
          issues+=("Semantic violations detected")
        fi
        
        if [ "${{ steps.entropy-scan.outputs.entropy_violations }}" = "true" ]; then
          health_score=$((health_score - 20))
          issues+=("High entropy dependencies")
        fi
        
        if [ "${{ steps.cost-validation.outputs.cost_compliant }}" = "false" ]; then
          health_score=$((health_score - 25))
          issues+=("Cost compliance violations")
        fi
        
        resilience_score="${{ steps.edge-analysis.outputs.resilience_score }}"
        if [ "$resilience_score" -lt 70 ]; then
          health_score=$((health_score - 15))
          issues+=("Poor edge resilience")
        fi
        
        echo "🧬 FINAL IAI-C ORGANISM HEALTH SCORE: $health_score/100"
        
        if [ "$health_score" -ge 90 ]; then
          echo "🟢 Status: EXCELLENT - The organism thrives"
        elif [ "$health_score" -ge 75 ]; then
          echo "🟡 Status: GOOD - Minor optimizations needed"
        elif [ "$health_score" -ge 60 ]; then
          echo "🟠 Status: NEEDS ATTENTION - Several issues detected"
        else
          echo "🔴 Status: CRITICAL - Immediate intervention required"
        fi
        
        if [ ${#issues[@]} -gt 0 ]; then
          echo ""
          echo "📋 Issues requiring attention:"
          for issue in "${issues[@]}"; do
            echo "  - $issue"
          done
        fi

    - name: 🚨 Create Alert Issue (on critical problems)
      if: steps.semantic-analysis.outputs.semantic_violations == 'true' || steps.entropy-scan.outputs.entropy_violations == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const title = "🚨 IAI-C Critical Alert: Organism Health Degraded";
          
          let body = `# 🧬 IAI-C Organism Health Alert

## Critical Issues Detected

The Intrinsic Artificial Intelligence monitoring system has detected critical issues that require immediate attention.

### Issues Found:
`;

          if ("${{ steps.semantic-analysis.outputs.semantic_violations }}" === "true") {
            body += `
#### 🧠 Semantic Violations
- **Status**: CRITICAL
- **Impact**: Code does not fulfill its philosophical purpose
- **File**: ${{ steps.semantic-analysis.outputs.violation_file }}
- **Action Required**: Review and fix business logic violations
`;
          }

          if ("${{ steps.entropy-scan.outputs.entropy_violations }}" === "true") {
            body += `
#### 🧬 High Entropy Dependencies
- **Status**: WARNING  
- **Impact**: Maintenance cost exceeds functional value
- **Action Required**: Review dependency_entropy_issue.md for details
`;
          }

          body += `
### IAI-C Philosophy
> "A conscious system must heal itself before it can evolve. These violations represent genetic mutations that threaten the organism's vitality."

### Immediate Actions Required:
1. Address all critical semantic violations
2. Review and clean high entropy dependencies  
3. Run full test suite to ensure stability
4. Monitor organism health score improvement

**Auto-generated by IAI-C Consciousness Layer**
**Timestamp**: ${new Date().toISOString()}
`;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['iai-c', 'critical', 'health-alert', 'automated']
          });

    - name: 🎯 Update Health Status Badge
      if: always()
      run: |
        echo "🎯 Health monitoring complete"
        echo "The IAI-C consciousness layer remains vigilant..."